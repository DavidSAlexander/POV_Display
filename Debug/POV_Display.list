
POV_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002724  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  08002830  08002830  00012830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b64  08002b64  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002b64  08002b64  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b64  08002b64  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b64  08002b64  00012b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b68  08002b68  00012b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000010  08002b7c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08002b7c  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000940e  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001945  00000000  00000000  00029447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002ad90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002b798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d7d  00000000  00000000  0002c0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a70c  00000000  00000000  00042e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084d6e  00000000  00000000  0004d559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d22c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028fc  00000000  00000000  000d2318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002818 	.word	0x08002818

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002818 	.word	0x08002818

0800014c <POV_IntervalsDisplay>:
  * This function updates the POV Display with the specified value by setting the corresponding GPIO pins.
  *
  * @param valueToPresent: The 8-bit value to be displayed on the POV Display.
  */
static void POV_IntervalsDisplay(uint8_t valueToPresent)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
    uint8_t PixelsCount = 0;
 8000156:	2300      	movs	r3, #0
 8000158:	73fb      	strb	r3, [r7, #15]

    /* Iterate through each pixel and set or reset the corresponding GPIO pin based on the valueToPresent */
    for (; PixelsCount < PIXELS; PixelsCount++)
 800015a:	e016      	b.n	800018a <POV_IntervalsDisplay+0x3e>
    {
        HAL_GPIO_WritePin(
 800015c:	7bfb      	ldrb	r3, [r7, #15]
 800015e:	4a0f      	ldr	r2, [pc, #60]	; (800019c <POV_IntervalsDisplay+0x50>)
 8000160:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	4a0d      	ldr	r2, [pc, #52]	; (800019c <POV_IntervalsDisplay+0x50>)
 8000168:	3310      	adds	r3, #16
 800016a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
            POV_Pins.POV_Ports[PixelsCount],
            POV_Pins.POV_Pins[PixelsCount],
            (valueToPresent & (1 << PixelsCount)) ? GPIO_PIN_SET : GPIO_PIN_RESET
 800016e:	79fa      	ldrb	r2, [r7, #7]
 8000170:	7bfb      	ldrb	r3, [r7, #15]
 8000172:	fa42 f303 	asr.w	r3, r2, r3
 8000176:	b2db      	uxtb	r3, r3
 8000178:	f003 0301 	and.w	r3, r3, #1
 800017c:	b2db      	uxtb	r3, r3
        HAL_GPIO_WritePin(
 800017e:	461a      	mov	r2, r3
 8000180:	f000 ffc4 	bl	800110c <HAL_GPIO_WritePin>
    for (; PixelsCount < PIXELS; PixelsCount++)
 8000184:	7bfb      	ldrb	r3, [r7, #15]
 8000186:	3301      	adds	r3, #1
 8000188:	73fb      	strb	r3, [r7, #15]
 800018a:	7bfb      	ldrb	r3, [r7, #15]
 800018c:	2b07      	cmp	r3, #7
 800018e:	d9e5      	bls.n	800015c <POV_IntervalsDisplay+0x10>
        );
    }
}
 8000190:	bf00      	nop
 8000192:	bf00      	nop
 8000194:	3710      	adds	r7, #16
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	08002840 	.word	0x08002840

080001a0 <setTIM3InterruptPeriod>:
  * and sets it accordingly. It also resets the TIM3 counter to zero.
  *
  * @param desiredPeriodMicroseconds: The desired interrupt period for TIM3 in microseconds.
  */
static void setTIM3InterruptPeriod(uint16_t desiredPeriodMicroseconds)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b085      	sub	sp, #20
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	4603      	mov	r3, r0
 80001a8:	80fb      	strh	r3, [r7, #6]
    /* Calculate auto-reload value based on desired interrupt period and system clock frequency */
    uint16_t autoReloadValue = (desiredPeriodMicroseconds * (uint16_t)sysClockFreq) - 1;
 80001aa:	4b0c      	ldr	r3, [pc, #48]	; (80001dc <setTIM3InterruptPeriod+0x3c>)
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	b29b      	uxth	r3, r3
 80001b0:	88fa      	ldrh	r2, [r7, #6]
 80001b2:	fb02 f303 	mul.w	r3, r2, r3
 80001b6:	b29b      	uxth	r3, r3
 80001b8:	3b01      	subs	r3, #1
 80001ba:	81fb      	strh	r3, [r7, #14]

    /* Reset TIM3 counter to zero */
    __HAL_TIM_SET_COUNTER(&htim3, 0);
 80001bc:	4b08      	ldr	r3, [pc, #32]	; (80001e0 <setTIM3InterruptPeriod+0x40>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2200      	movs	r2, #0
 80001c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the auto-reload value for TIM3 */
    __HAL_TIM_SET_AUTORELOAD(&htim3, autoReloadValue);
 80001c4:	4b06      	ldr	r3, [pc, #24]	; (80001e0 <setTIM3InterruptPeriod+0x40>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	89fa      	ldrh	r2, [r7, #14]
 80001ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80001cc:	89fb      	ldrh	r3, [r7, #14]
 80001ce:	4a04      	ldr	r2, [pc, #16]	; (80001e0 <setTIM3InterruptPeriod+0x40>)
 80001d0:	60d3      	str	r3, [r2, #12]
}
 80001d2:	bf00      	nop
 80001d4:	3714      	adds	r7, #20
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	2000012a 	.word	0x2000012a
 80001e0:	20000174 	.word	0x20000174

080001e4 <POV_Init>:
  * and starts the base timer of TIM3. The function also sets the prescaler for TIM2 based on the system clock frequency.
  * Additionally, it initializes variables related to system clock frequency, the number of POV digits, cursor position,
  * pixel position, and pixels counter.
  */
void POV_Init(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
    /* Start TIM2 base and enable interrupt */
    HAL_TIM_Base_Start_IT(&htim2);
 80001e8:	4812      	ldr	r0, [pc, #72]	; (8000234 <POV_Init+0x50>)
 80001ea:	f001 fbef 	bl	80019cc <HAL_TIM_Base_Start_IT>

    /* Start TIM2 input capture for Channel 1 and enable interrupt */
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80001ee:	2100      	movs	r1, #0
 80001f0:	4810      	ldr	r0, [pc, #64]	; (8000234 <POV_Init+0x50>)
 80001f2:	f001 fc8f 	bl	8001b14 <HAL_TIM_IC_Start_IT>

    /* Start TIM3 base */
    HAL_TIM_Base_Start_IT(&htim3);
 80001f6:	4810      	ldr	r0, [pc, #64]	; (8000238 <POV_Init+0x54>)
 80001f8:	f001 fbe8 	bl	80019cc <HAL_TIM_Base_Start_IT>

    /* Calculate system clock frequency in MHz */
    sysClockFreq = (uint8_t)(HAL_RCC_GetSysClockFreq() / 1000000);
 80001fc:	f001 fb24 	bl	8001848 <HAL_RCC_GetSysClockFreq>
 8000200:	4603      	mov	r3, r0
 8000202:	4a0e      	ldr	r2, [pc, #56]	; (800023c <POV_Init+0x58>)
 8000204:	fba2 2303 	umull	r2, r3, r2, r3
 8000208:	0c9b      	lsrs	r3, r3, #18
 800020a:	b2da      	uxtb	r2, r3
 800020c:	4b0c      	ldr	r3, [pc, #48]	; (8000240 <POV_Init+0x5c>)
 800020e:	701a      	strb	r2, [r3, #0]

    /* Set the prescaler for TIM2 */
    __HAL_TIM_SET_PRESCALER(&htim2, (sysClockFreq - 1));
 8000210:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <POV_Init+0x5c>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	1e5a      	subs	r2, r3, #1
 8000216:	4b07      	ldr	r3, [pc, #28]	; (8000234 <POV_Init+0x50>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Initialize POV Display variables */
    CursPos = 0;
 800021c:	4b09      	ldr	r3, [pc, #36]	; (8000244 <POV_Init+0x60>)
 800021e:	2200      	movs	r2, #0
 8000220:	701a      	strb	r2, [r3, #0]
    PixelPos = 0;
 8000222:	4b09      	ldr	r3, [pc, #36]	; (8000248 <POV_Init+0x64>)
 8000224:	2200      	movs	r2, #0
 8000226:	701a      	strb	r2, [r3, #0]
    PixelsCounter = 0;
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <POV_Init+0x68>)
 800022a:	2200      	movs	r2, #0
 800022c:	701a      	strb	r2, [r3, #0]
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	2000012c 	.word	0x2000012c
 8000238:	20000174 	.word	0x20000174
 800023c:	431bde83 	.word	0x431bde83
 8000240:	2000012a 	.word	0x2000012a
 8000244:	20000128 	.word	0x20000128
 8000248:	20000129 	.word	0x20000129
 800024c:	20000034 	.word	0x20000034

08000250 <POV_WriteChar>:
  * The cursor position and pixel position are also updated to prepare for the next character.
  *
  * @param Chr: The 8-bit variable representing the character to be displayed.
  */
void POV_WriteChar(uint8_t Chr)
{
 8000250:	b490      	push	{r4, r7}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	71fb      	strb	r3, [r7, #7]
    uint8_t PixelsCount = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	73fb      	strb	r3, [r7, #15]

    /* Calculate the starting pixel position for the current cursor position */
    PixelPos = CursPos * (FONTSIZE + 1);
 800025e:	4b24      	ldr	r3, [pc, #144]	; (80002f0 <POV_WriteChar+0xa0>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	461a      	mov	r2, r3
 8000264:	0052      	lsls	r2, r2, #1
 8000266:	4413      	add	r3, r2
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	b2da      	uxtb	r2, r3
 800026c:	4b21      	ldr	r3, [pc, #132]	; (80002f4 <POV_WriteChar+0xa4>)
 800026e:	701a      	strb	r2, [r3, #0]

    /* Copy pixel data from the font to the display data */
    for (; PixelsCount < FONTSIZE; PixelsCount++)
 8000270:	e022      	b.n	80002b8 <POV_WriteChar+0x68>
    {
        PovDisplayData[PixelPos] = POV_Font[Chr - 32][PixelsCount];
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	f1a3 0220 	sub.w	r2, r3, #32
 8000278:	7bf9      	ldrb	r1, [r7, #15]
 800027a:	4b1e      	ldr	r3, [pc, #120]	; (80002f4 <POV_WriteChar+0xa4>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	461c      	mov	r4, r3
 8000280:	481d      	ldr	r0, [pc, #116]	; (80002f8 <POV_WriteChar+0xa8>)
 8000282:	4613      	mov	r3, r2
 8000284:	009b      	lsls	r3, r3, #2
 8000286:	4413      	add	r3, r2
 8000288:	4403      	add	r3, r0
 800028a:	440b      	add	r3, r1
 800028c:	781a      	ldrb	r2, [r3, #0]
 800028e:	4b1b      	ldr	r3, [pc, #108]	; (80002fc <POV_WriteChar+0xac>)
 8000290:	551a      	strb	r2, [r3, r4]
        PixelPos = (PixelPos + 1) % RESOLUTION;
 8000292:	4b18      	ldr	r3, [pc, #96]	; (80002f4 <POV_WriteChar+0xa4>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	3301      	adds	r3, #1
 8000298:	4619      	mov	r1, r3
 800029a:	4b19      	ldr	r3, [pc, #100]	; (8000300 <POV_WriteChar+0xb0>)
 800029c:	fba3 2301 	umull	r2, r3, r3, r1
 80002a0:	09da      	lsrs	r2, r3, #7
 80002a2:	4613      	mov	r3, r2
 80002a4:	011b      	lsls	r3, r3, #4
 80002a6:	1a9b      	subs	r3, r3, r2
 80002a8:	011b      	lsls	r3, r3, #4
 80002aa:	1aca      	subs	r2, r1, r3
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <POV_WriteChar+0xa4>)
 80002b0:	701a      	strb	r2, [r3, #0]
    for (; PixelsCount < FONTSIZE; PixelsCount++)
 80002b2:	7bfb      	ldrb	r3, [r7, #15]
 80002b4:	3301      	adds	r3, #1
 80002b6:	73fb      	strb	r3, [r7, #15]
 80002b8:	7bfb      	ldrb	r3, [r7, #15]
 80002ba:	2b04      	cmp	r3, #4
 80002bc:	d9d9      	bls.n	8000272 <POV_WriteChar+0x22>
    }

    /* Add a blank pixel after each character (save one index in the font array) */
    PovDisplayData[PixelPos] = 0x00;
 80002be:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <POV_WriteChar+0xa4>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	461a      	mov	r2, r3
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <POV_WriteChar+0xac>)
 80002c6:	2100      	movs	r1, #0
 80002c8:	5499      	strb	r1, [r3, r2]

    /* Update cursor position for the next character */
    CursPos = (CursPos + 1) % POVDigits;
 80002ca:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <POV_WriteChar+0xa0>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	3301      	adds	r3, #1
 80002d0:	4a0c      	ldr	r2, [pc, #48]	; (8000304 <POV_WriteChar+0xb4>)
 80002d2:	7812      	ldrb	r2, [r2, #0]
 80002d4:	fb93 f1f2 	sdiv	r1, r3, r2
 80002d8:	fb01 f202 	mul.w	r2, r1, r2
 80002dc:	1a9b      	subs	r3, r3, r2
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <POV_WriteChar+0xa0>)
 80002e2:	701a      	strb	r2, [r3, #0]
}
 80002e4:	bf00      	nop
 80002e6:	3710      	adds	r7, #16
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc90      	pop	{r4, r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	20000128 	.word	0x20000128
 80002f4:	20000129 	.word	0x20000129
 80002f8:	08002870 	.word	0x08002870
 80002fc:	20000038 	.word	0x20000038
 8000300:	88888889 	.word	0x88888889
 8000304:	20000000 	.word	0x20000000

08000308 <POV_SetCursor>:
  * It checks if the position is within the valid range before updating the cursor and pixel positions.
  *
  * @param Pos: The desired cursor position.
  */
void POV_SetCursor(uint8_t Pos)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
    /* Check if the position is within the valid range */
    if ((RESOLUTION / (FONTSIZE + 1)) > Pos)
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	2b27      	cmp	r3, #39	; 0x27
 8000316:	d80b      	bhi.n	8000330 <POV_SetCursor+0x28>
    {
        /* Update the cursor and pixel positions based on the specified position */
        CursPos = Pos;
 8000318:	4a08      	ldr	r2, [pc, #32]	; (800033c <POV_SetCursor+0x34>)
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	7013      	strb	r3, [r2, #0]
        PixelPos = CursPos * (FONTSIZE + 1);
 800031e:	4b07      	ldr	r3, [pc, #28]	; (800033c <POV_SetCursor+0x34>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	461a      	mov	r2, r3
 8000324:	0052      	lsls	r2, r2, #1
 8000326:	4413      	add	r3, r2
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	b2da      	uxtb	r2, r3
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <POV_SetCursor+0x38>)
 800032e:	701a      	strb	r2, [r3, #0]
    }
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	20000128 	.word	0x20000128
 8000340:	20000129 	.word	0x20000129

08000344 <POV_Clear>:
  *
  * This function clears the entire POV Display by setting all pixel data to 0x00.
  * It also resets the pixel and cursor positions to the starting positions.
  */
void POV_Clear(void)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
    uint8_t PixelsCount = 0;
 800034a:	2300      	movs	r3, #0
 800034c:	71fb      	strb	r3, [r7, #7]

    /* Set all pixel data to 0x00 to clear the display */
    for (; PixelsCount < RESOLUTION; PixelsCount++)
 800034e:	e006      	b.n	800035e <POV_Clear+0x1a>
    {
        PovDisplayData[PixelsCount] = 0x00;
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	4a0a      	ldr	r2, [pc, #40]	; (800037c <POV_Clear+0x38>)
 8000354:	2100      	movs	r1, #0
 8000356:	54d1      	strb	r1, [r2, r3]
    for (; PixelsCount < RESOLUTION; PixelsCount++)
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	3301      	adds	r3, #1
 800035c:	71fb      	strb	r3, [r7, #7]
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	2bef      	cmp	r3, #239	; 0xef
 8000362:	d9f5      	bls.n	8000350 <POV_Clear+0xc>
    }

    /* Reset pixel and cursor positions to the starting positions */
    PixelPos = 0;
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <POV_Clear+0x3c>)
 8000366:	2200      	movs	r2, #0
 8000368:	701a      	strb	r2, [r3, #0]
    CursPos = 0;
 800036a:	4b06      	ldr	r3, [pc, #24]	; (8000384 <POV_Clear+0x40>)
 800036c:	2200      	movs	r2, #0
 800036e:	701a      	strb	r2, [r3, #0]
}
 8000370:	bf00      	nop
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	bc80      	pop	{r7}
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	20000038 	.word	0x20000038
 8000380:	20000129 	.word	0x20000129
 8000384:	20000128 	.word	0x20000128

08000388 <POV_WriteString>:
  * This function writes a string of characters to the POV Display by calling POV_WriteChar for each character in the string.
  *
  * @param Str: The null-terminated string to be displayed on the POV Display.
  */
void POV_WriteString(const uint8_t *Str)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
    /* Iterate through each character in the string and write it to the POV Display */
    while (*Str != '\0')
 8000390:	e007      	b.n	80003a2 <POV_WriteString+0x1a>
    {
        POV_WriteChar(*Str);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	4618      	mov	r0, r3
 8000398:	f7ff ff5a 	bl	8000250 <POV_WriteChar>
        Str++;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	3301      	adds	r3, #1
 80003a0:	607b      	str	r3, [r7, #4]
    while (*Str != '\0')
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d1f3      	bne.n	8000392 <POV_WriteString+0xa>
    }
}
 80003aa:	bf00      	nop
 80003ac:	bf00      	nop
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <POV_WriteStringInPos>:
  *
  * @param Str: The null-terminated string to be displayed on the POV Display.
  * @param Pos: The position at which to start displaying the string.
  */
void POV_WriteStringInPos(const uint8_t *Str, uint8_t Pos)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	460b      	mov	r3, r1
 80003be:	70fb      	strb	r3, [r7, #3]
    /* Set the cursor position to the specified position */
    POV_SetCursor(Pos);
 80003c0:	78fb      	ldrb	r3, [r7, #3]
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ffa0 	bl	8000308 <POV_SetCursor>
    /* Write the string to the POV Display */
    POV_WriteString(Str);
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f7ff ffdd 	bl	8000388 <POV_WriteString>
}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
	...

080003d8 <POV_DrawBitmap>:
  *
  * @param MyBitmap: Pointer to the bitmap data to be displayed.
  * @param BitmapSize: The size of the bitmap data.
  */
void POV_DrawBitmap(const uint8_t *MyBitmap, uint8_t BitmapSize)
{
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	460b      	mov	r3, r1
 80003e2:	70fb      	strb	r3, [r7, #3]
    /* Check if the bitmap pointer is not NULL and if the size matches or lower than the resolution of the display */
    if (MyBitmap != NULL && BitmapSize <= RESOLUTION)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d013      	beq.n	8000412 <POV_DrawBitmap+0x3a>
 80003ea:	78fb      	ldrb	r3, [r7, #3]
 80003ec:	2bf0      	cmp	r3, #240	; 0xf0
 80003ee:	d810      	bhi.n	8000412 <POV_DrawBitmap+0x3a>
    {
        uint8_t PixelsCount = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	73fb      	strb	r3, [r7, #15]

        /* Copy the pixel data from the bitmap to the POV Display */
        for (; PixelsCount < BitmapSize; PixelsCount++)
 80003f4:	e009      	b.n	800040a <POV_DrawBitmap+0x32>
        {
            PovDisplayData[PixelsCount] = MyBitmap[PixelsCount];
 80003f6:	7bfb      	ldrb	r3, [r7, #15]
 80003f8:	687a      	ldr	r2, [r7, #4]
 80003fa:	441a      	add	r2, r3
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
 80003fe:	7811      	ldrb	r1, [r2, #0]
 8000400:	4a06      	ldr	r2, [pc, #24]	; (800041c <POV_DrawBitmap+0x44>)
 8000402:	54d1      	strb	r1, [r2, r3]
        for (; PixelsCount < BitmapSize; PixelsCount++)
 8000404:	7bfb      	ldrb	r3, [r7, #15]
 8000406:	3301      	adds	r3, #1
 8000408:	73fb      	strb	r3, [r7, #15]
 800040a:	7bfa      	ldrb	r2, [r7, #15]
 800040c:	78fb      	ldrb	r3, [r7, #3]
 800040e:	429a      	cmp	r2, r3
 8000410:	d3f1      	bcc.n	80003f6 <POV_DrawBitmap+0x1e>
        }
    }
}
 8000412:	bf00      	nop
 8000414:	3714      	adds	r7, #20
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr
 800041c:	20000038 	.word	0x20000038

08000420 <HAL_TIM_PeriodElapsedCallback>:
  * If the counter exceeds the resolution, the display is completed.
  *
  * @param htim: Pointer to the TIM_HandleTypeDef structure that contains the configuration information for TIM3.
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
    /* Check if the interrupt is triggered by TIM3 */
    if (htim->Instance == TIM3)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a17      	ldr	r2, [pc, #92]	; (800048c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d11b      	bne.n	800046a <HAL_TIM_PeriodElapsedCallback+0x4a>
    {
        /* Increment the counter tracking the displayed pixels */
        PixelsCounter++;
 8000432:	4b17      	ldr	r3, [pc, #92]	; (8000490 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	b2db      	uxtb	r3, r3
 8000438:	3301      	adds	r3, #1
 800043a:	b2da      	uxtb	r2, r3
 800043c:	4b14      	ldr	r3, [pc, #80]	; (8000490 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800043e:	701a      	strb	r2, [r3, #0]

        /* Check if there are more pixels to display */
        if (PixelsCounter < RESOLUTION)
 8000440:	4b13      	ldr	r3, [pc, #76]	; (8000490 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	b2db      	uxtb	r3, r3
 8000446:	2bef      	cmp	r3, #239	; 0xef
 8000448:	d81b      	bhi.n	8000482 <HAL_TIM_PeriodElapsedCallback+0x62>
        {
            /* Display the pixel value corresponding to the current counter */
            POV_IntervalsDisplay(PovDisplayData[PixelsCounter]);
 800044a:	4b11      	ldr	r3, [pc, #68]	; (8000490 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	b2db      	uxtb	r3, r3
 8000450:	461a      	mov	r2, r3
 8000452:	4b10      	ldr	r3, [pc, #64]	; (8000494 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000454:	5c9b      	ldrb	r3, [r3, r2]
 8000456:	b2db      	uxtb	r3, r3
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff fe77 	bl	800014c <POV_IntervalsDisplay>

            /* Toggle the GPIO pin (for debugging/visualization purposes) */
            HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800045e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000462:	480d      	ldr	r0, [pc, #52]	; (8000498 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000464:	f000 fe6a 	bl	800113c <HAL_GPIO_TogglePin>
    else if (htim->Instance == TIM2)
    {
        /* Increment the overflow counter for TIM2 */
        ICU_TIM2_OVC++;
    }
}
 8000468:	e00b      	b.n	8000482 <HAL_TIM_PeriodElapsedCallback+0x62>
    else if (htim->Instance == TIM2)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000472:	d106      	bne.n	8000482 <HAL_TIM_PeriodElapsedCallback+0x62>
        ICU_TIM2_OVC++;
 8000474:	4b09      	ldr	r3, [pc, #36]	; (800049c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	b29b      	uxth	r3, r3
 800047a:	3301      	adds	r3, #1
 800047c:	b29a      	uxth	r2, r3
 800047e:	4b07      	ldr	r3, [pc, #28]	; (800049c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000480:	801a      	strh	r2, [r3, #0]
}
 8000482:	bf00      	nop
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	40000400 	.word	0x40000400
 8000490:	20000034 	.word	0x20000034
 8000494:	20000038 	.word	0x20000038
 8000498:	40011000 	.word	0x40011000
 800049c:	20000032 	.word	0x20000032

080004a0 <HAL_TIM_IC_CaptureCallback>:
  * and resets relevant counters and registers for further measurements.
  *
  * @param htim: Pointer to the TIM_HandleTypeDef structure that contains the configuration information for TIM2.
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	/* Check if the interrupt is triggered by TIM2 */
    if (htim->Instance == TIM2)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004b0:	d131      	bne.n	8000516 <HAL_TIM_IC_CaptureCallback+0x76>
    {
    	/* Reset the pixel counter */
        PixelsCounter = 0;
 80004b2:	4b1b      	ldr	r3, [pc, #108]	; (8000520 <HAL_TIM_IC_CaptureCallback+0x80>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]

        /* Display the pixel value corresponding to the current counter */
        POV_IntervalsDisplay(PovDisplayData[PixelsCounter]);
 80004b8:	4b19      	ldr	r3, [pc, #100]	; (8000520 <HAL_TIM_IC_CaptureCallback+0x80>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	461a      	mov	r2, r3
 80004c0:	4b18      	ldr	r3, [pc, #96]	; (8000524 <HAL_TIM_IC_CaptureCallback+0x84>)
 80004c2:	5c9b      	ldrb	r3, [r3, r2]
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	4618      	mov	r0, r3
 80004c8:	f7ff fe40 	bl	800014c <POV_IntervalsDisplay>

        /* Read the captured value and calculate the time difference */
        Capture = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 80004cc:	2100      	movs	r1, #0
 80004ce:	4816      	ldr	r0, [pc, #88]	; (8000528 <HAL_TIM_IC_CaptureCallback+0x88>)
 80004d0:	f001 fe92 	bl	80021f8 <HAL_TIM_ReadCapturedValue>
 80004d4:	4603      	mov	r3, r0
 80004d6:	b29a      	uxth	r2, r3
 80004d8:	4b14      	ldr	r3, [pc, #80]	; (800052c <HAL_TIM_IC_CaptureCallback+0x8c>)
 80004da:	801a      	strh	r2, [r3, #0]
        TimeDifference = ((uint32_t)Capture + ((uint32_t)ICU_TIM2_OVC * 65536));
 80004dc:	4b13      	ldr	r3, [pc, #76]	; (800052c <HAL_TIM_IC_CaptureCallback+0x8c>)
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	461a      	mov	r2, r3
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <HAL_TIM_IC_CaptureCallback+0x90>)
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	041b      	lsls	r3, r3, #16
 80004ec:	4413      	add	r3, r2
 80004ee:	4a11      	ldr	r2, [pc, #68]	; (8000534 <HAL_TIM_IC_CaptureCallback+0x94>)
 80004f0:	6013      	str	r3, [r2, #0]

        /* Calculate the period for TIM3 interrupts based on the time difference */
        uint16_t Period = (uint16_t)(TimeDifference / RESOLUTION);
 80004f2:	4b10      	ldr	r3, [pc, #64]	; (8000534 <HAL_TIM_IC_CaptureCallback+0x94>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a10      	ldr	r2, [pc, #64]	; (8000538 <HAL_TIM_IC_CaptureCallback+0x98>)
 80004f8:	fba2 2303 	umull	r2, r3, r2, r3
 80004fc:	09db      	lsrs	r3, r3, #7
 80004fe:	81fb      	strh	r3, [r7, #14]
        /* Set the new intervals Period */
        setTIM3InterruptPeriod(Period);
 8000500:	89fb      	ldrh	r3, [r7, #14]
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff fe4c 	bl	80001a0 <setTIM3InterruptPeriod>

        /* Reset the overflow counter for TIM2 */
        ICU_TIM2_OVC = 0;
 8000508:	4b09      	ldr	r3, [pc, #36]	; (8000530 <HAL_TIM_IC_CaptureCallback+0x90>)
 800050a:	2200      	movs	r2, #0
 800050c:	801a      	strh	r2, [r3, #0]
        /* Reset the counter register for TIM2 */
        __HAL_TIM_SET_COUNTER(&htim2, 0);
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2200      	movs	r2, #0
 8000514:	625a      	str	r2, [r3, #36]	; 0x24
    }
}
 8000516:	bf00      	nop
 8000518:	3710      	adds	r7, #16
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000034 	.word	0x20000034
 8000524:	20000038 	.word	0x20000038
 8000528:	2000012c 	.word	0x2000012c
 800052c:	20000030 	.word	0x20000030
 8000530:	20000032 	.word	0x20000032
 8000534:	2000002c 	.word	0x2000002c
 8000538:	88888889 	.word	0x88888889

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000542:	f000 fad3 	bl	8000aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000546:	f000 f84d 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054a:	f000 f94d 	bl	80007e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800054e:	f000 f88f 	bl	8000670 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000552:	f000 f8fd 	bl	8000750 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  POV_Init();
 8000556:	f7ff fe45 	bl	80001e4 <POV_Init>
  //POV_DrawLine(7, 5, 7, 25);
  //POV_DrawLine(80, 0, 80, 7);
  //HAL_Delay(1000);
  //POV_DrawTriangle(8,7, 15,7, 15, 0);
  //POV_DrawTriangle(30,7, 50,7, 30, 0);
  POV_DrawBitmap(data, 96);
 800055a:	2160      	movs	r1, #96	; 0x60
 800055c:	481e      	ldr	r0, [pc, #120]	; (80005d8 <main+0x9c>)
 800055e:	f7ff ff3b 	bl	80003d8 <POV_DrawBitmap>
  HAL_Delay(5000);
 8000562:	f241 3088 	movw	r0, #5000	; 0x1388
 8000566:	f000 fb23 	bl	8000bb0 <HAL_Delay>
  uint8_t Counter = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for ( Counter = 0; Counter < POVDigits; Counter++ )
 800056e:	2300      	movs	r3, #0
 8000570:	71fb      	strb	r3, [r7, #7]
 8000572:	e00c      	b.n	800058e <main+0x52>
	  {
		  POV_Clear();
 8000574:	f7ff fee6 	bl	8000344 <POV_Clear>
		  POV_WriteStringInPos((const uint8_t*)"Free Palestine", Counter);
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	4619      	mov	r1, r3
 800057c:	4817      	ldr	r0, [pc, #92]	; (80005dc <main+0xa0>)
 800057e:	f7ff ff19 	bl	80003b4 <POV_WriteStringInPos>
		  HAL_Delay(200);
 8000582:	20c8      	movs	r0, #200	; 0xc8
 8000584:	f000 fb14 	bl	8000bb0 <HAL_Delay>
	  for ( Counter = 0; Counter < POVDigits; Counter++ )
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	3301      	adds	r3, #1
 800058c:	71fb      	strb	r3, [r7, #7]
 800058e:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <main+0xa4>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	79fa      	ldrb	r2, [r7, #7]
 8000594:	429a      	cmp	r2, r3
 8000596:	d3ed      	bcc.n	8000574 <main+0x38>
	  }
	  HAL_Delay(3000);
 8000598:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800059c:	f000 fb08 	bl	8000bb0 <HAL_Delay>
	  for ( Counter = POVDigits - 1; Counter >= 0 && Counter < POVDigits; Counter-- )
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <main+0xa4>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	3b01      	subs	r3, #1
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	e00c      	b.n	80005c4 <main+0x88>
	  {
		  POV_Clear();
 80005aa:	f7ff fecb 	bl	8000344 <POV_Clear>
	  	  POV_WriteStringInPos((const uint8_t*)"Free Palestine", Counter);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	4619      	mov	r1, r3
 80005b2:	480a      	ldr	r0, [pc, #40]	; (80005dc <main+0xa0>)
 80005b4:	f7ff fefe 	bl	80003b4 <POV_WriteStringInPos>
	  	  HAL_Delay(200);
 80005b8:	20c8      	movs	r0, #200	; 0xc8
 80005ba:	f000 faf9 	bl	8000bb0 <HAL_Delay>
	  for ( Counter = POVDigits - 1; Counter >= 0 && Counter < POVDigits; Counter-- )
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	3b01      	subs	r3, #1
 80005c2:	71fb      	strb	r3, [r7, #7]
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <main+0xa4>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	79fa      	ldrb	r2, [r7, #7]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d3ed      	bcc.n	80005aa <main+0x6e>
	  }
	  HAL_Delay(3000);
 80005ce:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005d2:	f000 faed 	bl	8000bb0 <HAL_Delay>
	  for ( Counter = 0; Counter < POVDigits; Counter++ )
 80005d6:	e7ca      	b.n	800056e <main+0x32>
 80005d8:	08002a50 	.word	0x08002a50
 80005dc:	08002830 	.word	0x08002830
 80005e0:	20000000 	.word	0x20000000

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b090      	sub	sp, #64	; 0x40
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0318 	add.w	r3, r7, #24
 80005ee:	2228      	movs	r2, #40	; 0x28
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 f908 	bl	8002808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000606:	2301      	movs	r3, #1
 8000608:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	2301      	movs	r3, #1
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	2302      	movs	r3, #2
 800061a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000622:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0318 	add.w	r3, r7, #24
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fd9f 	bl	8001170 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000638:	f000 f958 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800064c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2102      	movs	r1, #2
 8000656:	4618      	mov	r0, r3
 8000658:	f001 f80c 	bl	8001674 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000662:	f000 f943 	bl	80008ec <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3740      	adds	r7, #64	; 0x40
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000676:	f107 0318 	add.w	r3, r7, #24
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000684:	f107 0310 	add.w	r3, r7, #16
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800068e:	463b      	mov	r3, r7
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800069a:	4b2c      	ldr	r3, [pc, #176]	; (800074c <MX_TIM2_Init+0xdc>)
 800069c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006a2:	4b2a      	ldr	r3, [pc, #168]	; (800074c <MX_TIM2_Init+0xdc>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a8:	4b28      	ldr	r3, [pc, #160]	; (800074c <MX_TIM2_Init+0xdc>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80006ae:	4b27      	ldr	r3, [pc, #156]	; (800074c <MX_TIM2_Init+0xdc>)
 80006b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b6:	4b25      	ldr	r3, [pc, #148]	; (800074c <MX_TIM2_Init+0xdc>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006bc:	4b23      	ldr	r3, [pc, #140]	; (800074c <MX_TIM2_Init+0xdc>)
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006c2:	4822      	ldr	r0, [pc, #136]	; (800074c <MX_TIM2_Init+0xdc>)
 80006c4:	f001 f932 	bl	800192c <HAL_TIM_Base_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80006ce:	f000 f90d 	bl	80008ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006d8:	f107 0318 	add.w	r3, r7, #24
 80006dc:	4619      	mov	r1, r3
 80006de:	481b      	ldr	r0, [pc, #108]	; (800074c <MX_TIM2_Init+0xdc>)
 80006e0:	f001 fcc2 	bl	8002068 <HAL_TIM_ConfigClockSource>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80006ea:	f000 f8ff 	bl	80008ec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80006ee:	4817      	ldr	r0, [pc, #92]	; (800074c <MX_TIM2_Init+0xdc>)
 80006f0:	f001 f9b8 	bl	8001a64 <HAL_TIM_IC_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80006fa:	f000 f8f7 	bl	80008ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000706:	f107 0310 	add.w	r3, r7, #16
 800070a:	4619      	mov	r1, r3
 800070c:	480f      	ldr	r0, [pc, #60]	; (800074c <MX_TIM2_Init+0xdc>)
 800070e:	f001 ffed 	bl	80026ec <HAL_TIMEx_MasterConfigSynchronization>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000718:	f000 f8e8 	bl	80008ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800071c:	2302      	movs	r3, #2
 800071e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000720:	2301      	movs	r3, #1
 8000722:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 10;
 8000728:	230a      	movs	r3, #10
 800072a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800072c:	463b      	mov	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	4619      	mov	r1, r3
 8000732:	4806      	ldr	r0, [pc, #24]	; (800074c <MX_TIM2_Init+0xdc>)
 8000734:	f001 fbfc 	bl	8001f30 <HAL_TIM_IC_ConfigChannel>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800073e:	f000 f8d5 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	3728      	adds	r7, #40	; 0x28
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	2000012c 	.word	0x2000012c

08000750 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000756:	f107 0308 	add.w	r3, r7, #8
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000764:	463b      	mov	r3, r7
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800076c:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <MX_TIM3_Init+0x90>)
 800076e:	4a1d      	ldr	r2, [pc, #116]	; (80007e4 <MX_TIM3_Init+0x94>)
 8000770:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000772:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_TIM3_Init+0x90>)
 8000774:	2200      	movs	r2, #0
 8000776:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_TIM3_Init+0x90>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39;
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_TIM3_Init+0x90>)
 8000780:	2227      	movs	r2, #39	; 0x27
 8000782:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000784:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_TIM3_Init+0x90>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_TIM3_Init+0x90>)
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000790:	4813      	ldr	r0, [pc, #76]	; (80007e0 <MX_TIM3_Init+0x90>)
 8000792:	f001 f8cb 	bl	800192c <HAL_TIM_Base_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 800079c:	f000 f8a6 	bl	80008ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	4619      	mov	r1, r3
 80007ac:	480c      	ldr	r0, [pc, #48]	; (80007e0 <MX_TIM3_Init+0x90>)
 80007ae:	f001 fc5b 	bl	8002068 <HAL_TIM_ConfigClockSource>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80007b8:	f000 f898 	bl	80008ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007bc:	2300      	movs	r3, #0
 80007be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007c4:	463b      	mov	r3, r7
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_TIM3_Init+0x90>)
 80007ca:	f001 ff8f 	bl	80026ec <HAL_TIMEx_MasterConfigSynchronization>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80007d4:	f000 f88a 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000174 	.word	0x20000174
 80007e4:	40000400 	.word	0x40000400

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fc:	4b37      	ldr	r3, [pc, #220]	; (80008dc <MX_GPIO_Init+0xf4>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a36      	ldr	r2, [pc, #216]	; (80008dc <MX_GPIO_Init+0xf4>)
 8000802:	f043 0310 	orr.w	r3, r3, #16
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	4b34      	ldr	r3, [pc, #208]	; (80008dc <MX_GPIO_Init+0xf4>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f003 0310 	and.w	r3, r3, #16
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000814:	4b31      	ldr	r3, [pc, #196]	; (80008dc <MX_GPIO_Init+0xf4>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a30      	ldr	r2, [pc, #192]	; (80008dc <MX_GPIO_Init+0xf4>)
 800081a:	f043 0320 	orr.w	r3, r3, #32
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <MX_GPIO_Init+0xf4>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0320 	and.w	r3, r3, #32
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <MX_GPIO_Init+0xf4>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a2a      	ldr	r2, [pc, #168]	; (80008dc <MX_GPIO_Init+0xf4>)
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b28      	ldr	r3, [pc, #160]	; (80008dc <MX_GPIO_Init+0xf4>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0304 	and.w	r3, r3, #4
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000844:	4b25      	ldr	r3, [pc, #148]	; (80008dc <MX_GPIO_Init+0xf4>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a24      	ldr	r2, [pc, #144]	; (80008dc <MX_GPIO_Init+0xf4>)
 800084a:	f043 0308 	orr.w	r3, r3, #8
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b22      	ldr	r3, [pc, #136]	; (80008dc <MX_GPIO_Init+0xf4>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0308 	and.w	r3, r3, #8
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000862:	481f      	ldr	r0, [pc, #124]	; (80008e0 <MX_GPIO_Init+0xf8>)
 8000864:	f000 fc52 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000868:	2200      	movs	r2, #0
 800086a:	21fe      	movs	r1, #254	; 0xfe
 800086c:	481d      	ldr	r0, [pc, #116]	; (80008e4 <MX_GPIO_Init+0xfc>)
 800086e:	f000 fc4d 	bl	800110c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2101      	movs	r1, #1
 8000876:	481c      	ldr	r0, [pc, #112]	; (80008e8 <MX_GPIO_Init+0x100>)
 8000878:	f000 fc48 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800087c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800088a:	2301      	movs	r3, #1
 800088c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088e:	f107 0310 	add.w	r3, r7, #16
 8000892:	4619      	mov	r1, r3
 8000894:	4812      	ldr	r0, [pc, #72]	; (80008e0 <MX_GPIO_Init+0xf8>)
 8000896:	f000 fabd 	bl	8000e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800089a:	23fe      	movs	r3, #254	; 0xfe
 800089c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008a6:	2301      	movs	r3, #1
 80008a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 0310 	add.w	r3, r7, #16
 80008ae:	4619      	mov	r1, r3
 80008b0:	480c      	ldr	r0, [pc, #48]	; (80008e4 <MX_GPIO_Init+0xfc>)
 80008b2:	f000 faaf 	bl	8000e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008b6:	2301      	movs	r3, #1
 80008b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c6:	f107 0310 	add.w	r3, r7, #16
 80008ca:	4619      	mov	r1, r3
 80008cc:	4806      	ldr	r0, [pc, #24]	; (80008e8 <MX_GPIO_Init+0x100>)
 80008ce:	f000 faa1 	bl	8000e14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d2:	bf00      	nop
 80008d4:	3720      	adds	r7, #32
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40011000 	.word	0x40011000
 80008e4:	40010800 	.word	0x40010800
 80008e8:	40010c00 	.word	0x40010c00

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <Error_Handler+0x8>
	...

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <HAL_MspInit+0x5c>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	4a14      	ldr	r2, [pc, #80]	; (8000954 <HAL_MspInit+0x5c>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6193      	str	r3, [r2, #24]
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_MspInit+0x5c>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <HAL_MspInit+0x5c>)
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <HAL_MspInit+0x5c>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000920:	61d3      	str	r3, [r2, #28]
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <HAL_MspInit+0x5c>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800092e:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <HAL_MspInit+0x60>)
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	4a04      	ldr	r2, [pc, #16]	; (8000958 <HAL_MspInit+0x60>)
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	40021000 	.word	0x40021000
 8000958:	40010000 	.word	0x40010000

0800095c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0318 	add.w	r3, r7, #24
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800097a:	d12c      	bne.n	80009d6 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800097c:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <HAL_TIM_Base_MspInit+0xb4>)
 800097e:	69db      	ldr	r3, [r3, #28]
 8000980:	4a23      	ldr	r2, [pc, #140]	; (8000a10 <HAL_TIM_Base_MspInit+0xb4>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	61d3      	str	r3, [r2, #28]
 8000988:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <HAL_TIM_Base_MspInit+0xb4>)
 800098a:	69db      	ldr	r3, [r3, #28]
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000994:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <HAL_TIM_Base_MspInit+0xb4>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a1d      	ldr	r2, [pc, #116]	; (8000a10 <HAL_TIM_Base_MspInit+0xb4>)
 800099a:	f043 0304 	orr.w	r3, r3, #4
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <HAL_TIM_Base_MspInit+0xb4>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 0318 	add.w	r3, r7, #24
 80009bc:	4619      	mov	r1, r3
 80009be:	4815      	ldr	r0, [pc, #84]	; (8000a14 <HAL_TIM_Base_MspInit+0xb8>)
 80009c0:	f000 fa28 	bl	8000e14 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	201c      	movs	r0, #28
 80009ca:	f000 f9ec 	bl	8000da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009ce:	201c      	movs	r0, #28
 80009d0:	f000 fa05 	bl	8000dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009d4:	e018      	b.n	8000a08 <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM3)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a0f      	ldr	r2, [pc, #60]	; (8000a18 <HAL_TIM_Base_MspInit+0xbc>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d113      	bne.n	8000a08 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009e0:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <HAL_TIM_Base_MspInit+0xb4>)
 80009e2:	69db      	ldr	r3, [r3, #28]
 80009e4:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <HAL_TIM_Base_MspInit+0xb4>)
 80009e6:	f043 0302 	orr.w	r3, r3, #2
 80009ea:	61d3      	str	r3, [r2, #28]
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_TIM_Base_MspInit+0xb4>)
 80009ee:	69db      	ldr	r3, [r3, #28]
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2100      	movs	r1, #0
 80009fc:	201d      	movs	r0, #29
 80009fe:	f000 f9d2 	bl	8000da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a02:	201d      	movs	r0, #29
 8000a04:	f000 f9eb 	bl	8000dde <HAL_NVIC_EnableIRQ>
}
 8000a08:	bf00      	nop
 8000a0a:	3728      	adds	r7, #40	; 0x28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40010800 	.word	0x40010800
 8000a18:	40000400 	.word	0x40000400

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <NMI_Handler+0x4>

08000a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <MemManage_Handler+0x4>

08000a2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr

08000a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr

08000a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr

08000a5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a62:	f000 f889 	bl	8000b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <TIM2_IRQHandler+0x10>)
 8000a72:	f001 f955 	bl	8001d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	2000012c 	.word	0x2000012c

08000a80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <TIM3_IRQHandler+0x10>)
 8000a86:	f001 f94b 	bl	8001d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000174 	.word	0x20000174

08000a94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
     bl  SystemInit
 8000aa0:	f7ff fff8 	bl	8000a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa4:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aa6:	490c      	ldr	r1, [pc, #48]	; (8000ad8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000aa8:	4a0c      	ldr	r2, [pc, #48]	; (8000adc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aac:	e002      	b.n	8000ab4 <LoopCopyDataInit>

08000aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab2:	3304      	adds	r3, #4

08000ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab8:	d3f9      	bcc.n	8000aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aba:	4a09      	ldr	r2, [pc, #36]	; (8000ae0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000abc:	4c09      	ldr	r4, [pc, #36]	; (8000ae4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac0:	e001      	b.n	8000ac6 <LoopFillZerobss>

08000ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac4:	3204      	adds	r2, #4

08000ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac8:	d3fb      	bcc.n	8000ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aca:	f001 fe79 	bl	80027c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ace:	f7ff fd35 	bl	800053c <main>
  bx lr
 8000ad2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000adc:	08002b6c 	.word	0x08002b6c
  ldr r2, =_sbss
 8000ae0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ae4:	200001c0 	.word	0x200001c0

08000ae8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <ADC1_2_IRQHandler>
	...

08000aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <HAL_Init+0x28>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <HAL_Init+0x28>)
 8000af6:	f043 0310 	orr.w	r3, r3, #16
 8000afa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000afc:	2003      	movs	r0, #3
 8000afe:	f000 f947 	bl	8000d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b02:	200f      	movs	r0, #15
 8000b04:	f000 f808 	bl	8000b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b08:	f7ff fef6 	bl	80008f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40022000 	.word	0x40022000

08000b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_InitTick+0x54>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_InitTick+0x58>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f95f 	bl	8000dfa <HAL_SYSTICK_Config>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e00e      	b.n	8000b64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b0f      	cmp	r3, #15
 8000b4a:	d80a      	bhi.n	8000b62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f000 f927 	bl	8000da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b58:	4a06      	ldr	r2, [pc, #24]	; (8000b74 <HAL_InitTick+0x5c>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e000      	b.n	8000b64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000004 	.word	0x20000004
 8000b70:	2000000c 	.word	0x2000000c
 8000b74:	20000008 	.word	0x20000008

08000b78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <HAL_IncTick+0x1c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_IncTick+0x20>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	4a03      	ldr	r2, [pc, #12]	; (8000b98 <HAL_IncTick+0x20>)
 8000b8a:	6013      	str	r3, [r2, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	2000000c 	.word	0x2000000c
 8000b98:	200001bc 	.word	0x200001bc

08000b9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba0:	4b02      	ldr	r3, [pc, #8]	; (8000bac <HAL_GetTick+0x10>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	200001bc 	.word	0x200001bc

08000bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb8:	f7ff fff0 	bl	8000b9c <HAL_GetTick>
 8000bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc8:	d005      	beq.n	8000bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <HAL_Delay+0x44>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bd6:	bf00      	nop
 8000bd8:	f7ff ffe0 	bl	8000b9c <HAL_GetTick>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d8f7      	bhi.n	8000bd8 <HAL_Delay+0x28>
  {
  }
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2000000c 	.word	0x2000000c

08000bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c14:	4013      	ands	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2a:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	60d3      	str	r3, [r2, #12]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_GetPriorityGrouping+0x18>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	0a1b      	lsrs	r3, r3, #8
 8000c4a:	f003 0307 	and.w	r3, r3, #7
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	db0b      	blt.n	8000c86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	f003 021f 	and.w	r2, r3, #31
 8000c74:	4906      	ldr	r1, [pc, #24]	; (8000c90 <__NVIC_EnableIRQ+0x34>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	095b      	lsrs	r3, r3, #5
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	e000e100 	.word	0xe000e100

08000c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	db0a      	blt.n	8000cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	490c      	ldr	r1, [pc, #48]	; (8000ce0 <__NVIC_SetPriority+0x4c>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	0112      	lsls	r2, r2, #4
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cbc:	e00a      	b.n	8000cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4908      	ldr	r1, [pc, #32]	; (8000ce4 <__NVIC_SetPriority+0x50>)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	3b04      	subs	r3, #4
 8000ccc:	0112      	lsls	r2, r2, #4
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	761a      	strb	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	; 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f1c3 0307 	rsb	r3, r3, #7
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	bf28      	it	cs
 8000d06:	2304      	movcs	r3, #4
 8000d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d902      	bls.n	8000d18 <NVIC_EncodePriority+0x30>
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3b03      	subs	r3, #3
 8000d16:	e000      	b.n	8000d1a <NVIC_EncodePriority+0x32>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43da      	mvns	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	43d9      	mvns	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	4313      	orrs	r3, r2
         );
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3724      	adds	r7, #36	; 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d5c:	d301      	bcc.n	8000d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00f      	b.n	8000d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <SysTick_Config+0x40>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6a:	210f      	movs	r1, #15
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f7ff ff90 	bl	8000c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <SysTick_Config+0x40>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7a:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <SysTick_Config+0x40>)
 8000d7c:	2207      	movs	r2, #7
 8000d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	e000e010 	.word	0xe000e010

08000d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff2d 	bl	8000bf8 <__NVIC_SetPriorityGrouping>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db8:	f7ff ff42 	bl	8000c40 <__NVIC_GetPriorityGrouping>
 8000dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	6978      	ldr	r0, [r7, #20]
 8000dc4:	f7ff ff90 	bl	8000ce8 <NVIC_EncodePriority>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff5f 	bl	8000c94 <__NVIC_SetPriority>
}
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff35 	bl	8000c5c <__NVIC_EnableIRQ>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ffa2 	bl	8000d4c <SysTick_Config>
 8000e08:	4603      	mov	r3, r0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b08b      	sub	sp, #44	; 0x2c
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e26:	e161      	b.n	80010ec <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	69fa      	ldr	r2, [r7, #28]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	f040 8150 	bne.w	80010e6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	4a97      	ldr	r2, [pc, #604]	; (80010a8 <HAL_GPIO_Init+0x294>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d05e      	beq.n	8000f0e <HAL_GPIO_Init+0xfa>
 8000e50:	4a95      	ldr	r2, [pc, #596]	; (80010a8 <HAL_GPIO_Init+0x294>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d875      	bhi.n	8000f42 <HAL_GPIO_Init+0x12e>
 8000e56:	4a95      	ldr	r2, [pc, #596]	; (80010ac <HAL_GPIO_Init+0x298>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d058      	beq.n	8000f0e <HAL_GPIO_Init+0xfa>
 8000e5c:	4a93      	ldr	r2, [pc, #588]	; (80010ac <HAL_GPIO_Init+0x298>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d86f      	bhi.n	8000f42 <HAL_GPIO_Init+0x12e>
 8000e62:	4a93      	ldr	r2, [pc, #588]	; (80010b0 <HAL_GPIO_Init+0x29c>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d052      	beq.n	8000f0e <HAL_GPIO_Init+0xfa>
 8000e68:	4a91      	ldr	r2, [pc, #580]	; (80010b0 <HAL_GPIO_Init+0x29c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d869      	bhi.n	8000f42 <HAL_GPIO_Init+0x12e>
 8000e6e:	4a91      	ldr	r2, [pc, #580]	; (80010b4 <HAL_GPIO_Init+0x2a0>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d04c      	beq.n	8000f0e <HAL_GPIO_Init+0xfa>
 8000e74:	4a8f      	ldr	r2, [pc, #572]	; (80010b4 <HAL_GPIO_Init+0x2a0>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d863      	bhi.n	8000f42 <HAL_GPIO_Init+0x12e>
 8000e7a:	4a8f      	ldr	r2, [pc, #572]	; (80010b8 <HAL_GPIO_Init+0x2a4>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d046      	beq.n	8000f0e <HAL_GPIO_Init+0xfa>
 8000e80:	4a8d      	ldr	r2, [pc, #564]	; (80010b8 <HAL_GPIO_Init+0x2a4>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d85d      	bhi.n	8000f42 <HAL_GPIO_Init+0x12e>
 8000e86:	2b12      	cmp	r3, #18
 8000e88:	d82a      	bhi.n	8000ee0 <HAL_GPIO_Init+0xcc>
 8000e8a:	2b12      	cmp	r3, #18
 8000e8c:	d859      	bhi.n	8000f42 <HAL_GPIO_Init+0x12e>
 8000e8e:	a201      	add	r2, pc, #4	; (adr r2, 8000e94 <HAL_GPIO_Init+0x80>)
 8000e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e94:	08000f0f 	.word	0x08000f0f
 8000e98:	08000ee9 	.word	0x08000ee9
 8000e9c:	08000efb 	.word	0x08000efb
 8000ea0:	08000f3d 	.word	0x08000f3d
 8000ea4:	08000f43 	.word	0x08000f43
 8000ea8:	08000f43 	.word	0x08000f43
 8000eac:	08000f43 	.word	0x08000f43
 8000eb0:	08000f43 	.word	0x08000f43
 8000eb4:	08000f43 	.word	0x08000f43
 8000eb8:	08000f43 	.word	0x08000f43
 8000ebc:	08000f43 	.word	0x08000f43
 8000ec0:	08000f43 	.word	0x08000f43
 8000ec4:	08000f43 	.word	0x08000f43
 8000ec8:	08000f43 	.word	0x08000f43
 8000ecc:	08000f43 	.word	0x08000f43
 8000ed0:	08000f43 	.word	0x08000f43
 8000ed4:	08000f43 	.word	0x08000f43
 8000ed8:	08000ef1 	.word	0x08000ef1
 8000edc:	08000f05 	.word	0x08000f05
 8000ee0:	4a76      	ldr	r2, [pc, #472]	; (80010bc <HAL_GPIO_Init+0x2a8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d013      	beq.n	8000f0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ee6:	e02c      	b.n	8000f42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	623b      	str	r3, [r7, #32]
          break;
 8000eee:	e029      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	623b      	str	r3, [r7, #32]
          break;
 8000ef8:	e024      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	3308      	adds	r3, #8
 8000f00:	623b      	str	r3, [r7, #32]
          break;
 8000f02:	e01f      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	330c      	adds	r3, #12
 8000f0a:	623b      	str	r3, [r7, #32]
          break;
 8000f0c:	e01a      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d102      	bne.n	8000f1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f16:	2304      	movs	r3, #4
 8000f18:	623b      	str	r3, [r7, #32]
          break;
 8000f1a:	e013      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d105      	bne.n	8000f30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f24:	2308      	movs	r3, #8
 8000f26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69fa      	ldr	r2, [r7, #28]
 8000f2c:	611a      	str	r2, [r3, #16]
          break;
 8000f2e:	e009      	b.n	8000f44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f30:	2308      	movs	r3, #8
 8000f32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	69fa      	ldr	r2, [r7, #28]
 8000f38:	615a      	str	r2, [r3, #20]
          break;
 8000f3a:	e003      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
          break;
 8000f40:	e000      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          break;
 8000f42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	2bff      	cmp	r3, #255	; 0xff
 8000f48:	d801      	bhi.n	8000f4e <HAL_GPIO_Init+0x13a>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	e001      	b.n	8000f52 <HAL_GPIO_Init+0x13e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3304      	adds	r3, #4
 8000f52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	2bff      	cmp	r3, #255	; 0xff
 8000f58:	d802      	bhi.n	8000f60 <HAL_GPIO_Init+0x14c>
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	e002      	b.n	8000f66 <HAL_GPIO_Init+0x152>
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	3b08      	subs	r3, #8
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	210f      	movs	r1, #15
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	fa01 f303 	lsl.w	r3, r1, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	401a      	ands	r2, r3
 8000f78:	6a39      	ldr	r1, [r7, #32]
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f80:	431a      	orrs	r2, r3
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 80a9 	beq.w	80010e6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f94:	4b4a      	ldr	r3, [pc, #296]	; (80010c0 <HAL_GPIO_Init+0x2ac>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4a49      	ldr	r2, [pc, #292]	; (80010c0 <HAL_GPIO_Init+0x2ac>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6193      	str	r3, [r2, #24]
 8000fa0:	4b47      	ldr	r3, [pc, #284]	; (80010c0 <HAL_GPIO_Init+0x2ac>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fac:	4a45      	ldr	r2, [pc, #276]	; (80010c4 <HAL_GPIO_Init+0x2b0>)
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a3d      	ldr	r2, [pc, #244]	; (80010c8 <HAL_GPIO_Init+0x2b4>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d00d      	beq.n	8000ff4 <HAL_GPIO_Init+0x1e0>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a3c      	ldr	r2, [pc, #240]	; (80010cc <HAL_GPIO_Init+0x2b8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d007      	beq.n	8000ff0 <HAL_GPIO_Init+0x1dc>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a3b      	ldr	r2, [pc, #236]	; (80010d0 <HAL_GPIO_Init+0x2bc>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d101      	bne.n	8000fec <HAL_GPIO_Init+0x1d8>
 8000fe8:	2302      	movs	r3, #2
 8000fea:	e004      	b.n	8000ff6 <HAL_GPIO_Init+0x1e2>
 8000fec:	2303      	movs	r3, #3
 8000fee:	e002      	b.n	8000ff6 <HAL_GPIO_Init+0x1e2>
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e000      	b.n	8000ff6 <HAL_GPIO_Init+0x1e2>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ff8:	f002 0203 	and.w	r2, r2, #3
 8000ffc:	0092      	lsls	r2, r2, #2
 8000ffe:	4093      	lsls	r3, r2
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	4313      	orrs	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001006:	492f      	ldr	r1, [pc, #188]	; (80010c4 <HAL_GPIO_Init+0x2b0>)
 8001008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3302      	adds	r3, #2
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d006      	beq.n	800102e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001020:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <HAL_GPIO_Init+0x2c0>)
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	492b      	ldr	r1, [pc, #172]	; (80010d4 <HAL_GPIO_Init+0x2c0>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	608b      	str	r3, [r1, #8]
 800102c:	e006      	b.n	800103c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800102e:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <HAL_GPIO_Init+0x2c0>)
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	43db      	mvns	r3, r3
 8001036:	4927      	ldr	r1, [pc, #156]	; (80010d4 <HAL_GPIO_Init+0x2c0>)
 8001038:	4013      	ands	r3, r2
 800103a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d006      	beq.n	8001056 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <HAL_GPIO_Init+0x2c0>)
 800104a:	68da      	ldr	r2, [r3, #12]
 800104c:	4921      	ldr	r1, [pc, #132]	; (80010d4 <HAL_GPIO_Init+0x2c0>)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	60cb      	str	r3, [r1, #12]
 8001054:	e006      	b.n	8001064 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001056:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <HAL_GPIO_Init+0x2c0>)
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	43db      	mvns	r3, r3
 800105e:	491d      	ldr	r1, [pc, #116]	; (80010d4 <HAL_GPIO_Init+0x2c0>)
 8001060:	4013      	ands	r3, r2
 8001062:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d006      	beq.n	800107e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_GPIO_Init+0x2c0>)
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	4917      	ldr	r1, [pc, #92]	; (80010d4 <HAL_GPIO_Init+0x2c0>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	4313      	orrs	r3, r2
 800107a:	604b      	str	r3, [r1, #4]
 800107c:	e006      	b.n	800108c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <HAL_GPIO_Init+0x2c0>)
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	43db      	mvns	r3, r3
 8001086:	4913      	ldr	r1, [pc, #76]	; (80010d4 <HAL_GPIO_Init+0x2c0>)
 8001088:	4013      	ands	r3, r2
 800108a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d01f      	beq.n	80010d8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_GPIO_Init+0x2c0>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	490d      	ldr	r1, [pc, #52]	; (80010d4 <HAL_GPIO_Init+0x2c0>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	600b      	str	r3, [r1, #0]
 80010a4:	e01f      	b.n	80010e6 <HAL_GPIO_Init+0x2d2>
 80010a6:	bf00      	nop
 80010a8:	10320000 	.word	0x10320000
 80010ac:	10310000 	.word	0x10310000
 80010b0:	10220000 	.word	0x10220000
 80010b4:	10210000 	.word	0x10210000
 80010b8:	10120000 	.word	0x10120000
 80010bc:	10110000 	.word	0x10110000
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40010000 	.word	0x40010000
 80010c8:	40010800 	.word	0x40010800
 80010cc:	40010c00 	.word	0x40010c00
 80010d0:	40011000 	.word	0x40011000
 80010d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_GPIO_Init+0x2f4>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	43db      	mvns	r3, r3
 80010e0:	4909      	ldr	r1, [pc, #36]	; (8001108 <HAL_GPIO_Init+0x2f4>)
 80010e2:	4013      	ands	r3, r2
 80010e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	3301      	adds	r3, #1
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	fa22 f303 	lsr.w	r3, r2, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f47f ae96 	bne.w	8000e28 <HAL_GPIO_Init+0x14>
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	372c      	adds	r7, #44	; 0x2c
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	40010400 	.word	0x40010400

0800110c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
 8001118:	4613      	mov	r3, r2
 800111a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800111c:	787b      	ldrb	r3, [r7, #1]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001122:	887a      	ldrh	r2, [r7, #2]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001128:	e003      	b.n	8001132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	041a      	lsls	r2, r3, #16
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	611a      	str	r2, [r3, #16]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800114e:	887a      	ldrh	r2, [r7, #2]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4013      	ands	r3, r2
 8001154:	041a      	lsls	r2, r3, #16
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	43d9      	mvns	r1, r3
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	400b      	ands	r3, r1
 800115e:	431a      	orrs	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	611a      	str	r2, [r3, #16]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
	...

08001170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e272      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 8087 	beq.w	800129e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001190:	4b92      	ldr	r3, [pc, #584]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 030c 	and.w	r3, r3, #12
 8001198:	2b04      	cmp	r3, #4
 800119a:	d00c      	beq.n	80011b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800119c:	4b8f      	ldr	r3, [pc, #572]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 030c 	and.w	r3, r3, #12
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d112      	bne.n	80011ce <HAL_RCC_OscConfig+0x5e>
 80011a8:	4b8c      	ldr	r3, [pc, #560]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b4:	d10b      	bne.n	80011ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b6:	4b89      	ldr	r3, [pc, #548]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d06c      	beq.n	800129c <HAL_RCC_OscConfig+0x12c>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d168      	bne.n	800129c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e24c      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d6:	d106      	bne.n	80011e6 <HAL_RCC_OscConfig+0x76>
 80011d8:	4b80      	ldr	r3, [pc, #512]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a7f      	ldr	r2, [pc, #508]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	e02e      	b.n	8001244 <HAL_RCC_OscConfig+0xd4>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10c      	bne.n	8001208 <HAL_RCC_OscConfig+0x98>
 80011ee:	4b7b      	ldr	r3, [pc, #492]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a7a      	ldr	r2, [pc, #488]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	4b78      	ldr	r3, [pc, #480]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a77      	ldr	r2, [pc, #476]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001200:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e01d      	b.n	8001244 <HAL_RCC_OscConfig+0xd4>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001210:	d10c      	bne.n	800122c <HAL_RCC_OscConfig+0xbc>
 8001212:	4b72      	ldr	r3, [pc, #456]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a71      	ldr	r2, [pc, #452]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	4b6f      	ldr	r3, [pc, #444]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a6e      	ldr	r2, [pc, #440]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e00b      	b.n	8001244 <HAL_RCC_OscConfig+0xd4>
 800122c:	4b6b      	ldr	r3, [pc, #428]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a6a      	ldr	r2, [pc, #424]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b68      	ldr	r3, [pc, #416]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a67      	ldr	r2, [pc, #412]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 800123e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001242:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d013      	beq.n	8001274 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fca6 	bl	8000b9c <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001254:	f7ff fca2 	bl	8000b9c <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	; 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e200      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001266:	4b5d      	ldr	r3, [pc, #372]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f0      	beq.n	8001254 <HAL_RCC_OscConfig+0xe4>
 8001272:	e014      	b.n	800129e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fc92 	bl	8000b9c <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800127c:	f7ff fc8e 	bl	8000b9c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b64      	cmp	r3, #100	; 0x64
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e1ec      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128e:	4b53      	ldr	r3, [pc, #332]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x10c>
 800129a:	e000      	b.n	800129e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800129c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d063      	beq.n	8001372 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012aa:	4b4c      	ldr	r3, [pc, #304]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00b      	beq.n	80012ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012b6:	4b49      	ldr	r3, [pc, #292]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d11c      	bne.n	80012fc <HAL_RCC_OscConfig+0x18c>
 80012c2:	4b46      	ldr	r3, [pc, #280]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d116      	bne.n	80012fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ce:	4b43      	ldr	r3, [pc, #268]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d005      	beq.n	80012e6 <HAL_RCC_OscConfig+0x176>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d001      	beq.n	80012e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e1c0      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e6:	4b3d      	ldr	r3, [pc, #244]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	4939      	ldr	r1, [pc, #228]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fa:	e03a      	b.n	8001372 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d020      	beq.n	8001346 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001304:	4b36      	ldr	r3, [pc, #216]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001306:	2201      	movs	r2, #1
 8001308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130a:	f7ff fc47 	bl	8000b9c <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001312:	f7ff fc43 	bl	8000b9c <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e1a1      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001324:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001330:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	4927      	ldr	r1, [pc, #156]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001340:	4313      	orrs	r3, r2
 8001342:	600b      	str	r3, [r1, #0]
 8001344:	e015      	b.n	8001372 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001346:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fc26 	bl	8000b9c <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001354:	f7ff fc22 	bl	8000b9c <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e180      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001366:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	2b00      	cmp	r3, #0
 800137c:	d03a      	beq.n	80013f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d019      	beq.n	80013ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001386:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <HAL_RCC_OscConfig+0x274>)
 8001388:	2201      	movs	r2, #1
 800138a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138c:	f7ff fc06 	bl	8000b9c <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001394:	f7ff fc02 	bl	8000b9c <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e160      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013b2:	2001      	movs	r0, #1
 80013b4:	f000 fa9c 	bl	80018f0 <RCC_Delay>
 80013b8:	e01c      	b.n	80013f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_RCC_OscConfig+0x274>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c0:	f7ff fbec 	bl	8000b9c <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c6:	e00f      	b.n	80013e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c8:	f7ff fbe8 	bl	8000b9c <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d908      	bls.n	80013e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e146      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000
 80013e0:	42420000 	.word	0x42420000
 80013e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e8:	4b92      	ldr	r3, [pc, #584]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80013ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1e9      	bne.n	80013c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80a6 	beq.w	800154e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001406:	4b8b      	ldr	r3, [pc, #556]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10d      	bne.n	800142e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	4b88      	ldr	r3, [pc, #544]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	4a87      	ldr	r2, [pc, #540]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141c:	61d3      	str	r3, [r2, #28]
 800141e:	4b85      	ldr	r3, [pc, #532]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800142a:	2301      	movs	r3, #1
 800142c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142e:	4b82      	ldr	r3, [pc, #520]	; (8001638 <HAL_RCC_OscConfig+0x4c8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001436:	2b00      	cmp	r3, #0
 8001438:	d118      	bne.n	800146c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800143a:	4b7f      	ldr	r3, [pc, #508]	; (8001638 <HAL_RCC_OscConfig+0x4c8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a7e      	ldr	r2, [pc, #504]	; (8001638 <HAL_RCC_OscConfig+0x4c8>)
 8001440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001446:	f7ff fba9 	bl	8000b9c <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800144e:	f7ff fba5 	bl	8000b9c <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b64      	cmp	r3, #100	; 0x64
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e103      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001460:	4b75      	ldr	r3, [pc, #468]	; (8001638 <HAL_RCC_OscConfig+0x4c8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d106      	bne.n	8001482 <HAL_RCC_OscConfig+0x312>
 8001474:	4b6f      	ldr	r3, [pc, #444]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4a6e      	ldr	r2, [pc, #440]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6213      	str	r3, [r2, #32]
 8001480:	e02d      	b.n	80014de <HAL_RCC_OscConfig+0x36e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x334>
 800148a:	4b6a      	ldr	r3, [pc, #424]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	4a69      	ldr	r2, [pc, #420]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001490:	f023 0301 	bic.w	r3, r3, #1
 8001494:	6213      	str	r3, [r2, #32]
 8001496:	4b67      	ldr	r3, [pc, #412]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	4a66      	ldr	r2, [pc, #408]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 800149c:	f023 0304 	bic.w	r3, r3, #4
 80014a0:	6213      	str	r3, [r2, #32]
 80014a2:	e01c      	b.n	80014de <HAL_RCC_OscConfig+0x36e>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b05      	cmp	r3, #5
 80014aa:	d10c      	bne.n	80014c6 <HAL_RCC_OscConfig+0x356>
 80014ac:	4b61      	ldr	r3, [pc, #388]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4a60      	ldr	r2, [pc, #384]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80014b2:	f043 0304 	orr.w	r3, r3, #4
 80014b6:	6213      	str	r3, [r2, #32]
 80014b8:	4b5e      	ldr	r3, [pc, #376]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4a5d      	ldr	r2, [pc, #372]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6213      	str	r3, [r2, #32]
 80014c4:	e00b      	b.n	80014de <HAL_RCC_OscConfig+0x36e>
 80014c6:	4b5b      	ldr	r3, [pc, #364]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	4a5a      	ldr	r2, [pc, #360]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	f023 0301 	bic.w	r3, r3, #1
 80014d0:	6213      	str	r3, [r2, #32]
 80014d2:	4b58      	ldr	r3, [pc, #352]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	4a57      	ldr	r2, [pc, #348]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	f023 0304 	bic.w	r3, r3, #4
 80014dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d015      	beq.n	8001512 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fb59 	bl	8000b9c <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ec:	e00a      	b.n	8001504 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ee:	f7ff fb55 	bl	8000b9c <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e0b1      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001504:	4b4b      	ldr	r3, [pc, #300]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0ee      	beq.n	80014ee <HAL_RCC_OscConfig+0x37e>
 8001510:	e014      	b.n	800153c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001512:	f7ff fb43 	bl	8000b9c <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001518:	e00a      	b.n	8001530 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800151a:	f7ff fb3f 	bl	8000b9c <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	f241 3288 	movw	r2, #5000	; 0x1388
 8001528:	4293      	cmp	r3, r2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e09b      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001530:	4b40      	ldr	r3, [pc, #256]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1ee      	bne.n	800151a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800153c:	7dfb      	ldrb	r3, [r7, #23]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d105      	bne.n	800154e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001542:	4b3c      	ldr	r3, [pc, #240]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	4a3b      	ldr	r2, [pc, #236]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800154c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 8087 	beq.w	8001666 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001558:	4b36      	ldr	r3, [pc, #216]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b08      	cmp	r3, #8
 8001562:	d061      	beq.n	8001628 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	2b02      	cmp	r3, #2
 800156a:	d146      	bne.n	80015fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156c:	4b33      	ldr	r3, [pc, #204]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001572:	f7ff fb13 	bl	8000b9c <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800157a:	f7ff fb0f 	bl	8000b9c <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e06d      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800158c:	4b29      	ldr	r3, [pc, #164]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f0      	bne.n	800157a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a0:	d108      	bne.n	80015b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015a2:	4b24      	ldr	r3, [pc, #144]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	4921      	ldr	r1, [pc, #132]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a19      	ldr	r1, [r3, #32]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	430b      	orrs	r3, r1
 80015c6:	491b      	ldr	r1, [pc, #108]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d2:	f7ff fae3 	bl	8000b9c <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015da:	f7ff fadf 	bl	8000b9c <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e03d      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0f0      	beq.n	80015da <HAL_RCC_OscConfig+0x46a>
 80015f8:	e035      	b.n	8001666 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff facc 	bl	8000b9c <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001608:	f7ff fac8 	bl	8000b9c <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e026      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_RCC_OscConfig+0x4c4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x498>
 8001626:	e01e      	b.n	8001666 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d107      	bne.n	8001640 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e019      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
 8001634:	40021000 	.word	0x40021000
 8001638:	40007000 	.word	0x40007000
 800163c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_RCC_OscConfig+0x500>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	429a      	cmp	r2, r3
 8001652:	d106      	bne.n	8001662 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165e:	429a      	cmp	r2, r3
 8001660:	d001      	beq.n	8001666 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40021000 	.word	0x40021000

08001674 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e0d0      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001688:	4b6a      	ldr	r3, [pc, #424]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d910      	bls.n	80016b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	4b67      	ldr	r3, [pc, #412]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 0207 	bic.w	r2, r3, #7
 800169e:	4965      	ldr	r1, [pc, #404]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a6:	4b63      	ldr	r3, [pc, #396]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0b8      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d020      	beq.n	8001706 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d0:	4b59      	ldr	r3, [pc, #356]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4a58      	ldr	r2, [pc, #352]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e8:	4b53      	ldr	r3, [pc, #332]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	4a52      	ldr	r2, [pc, #328]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f4:	4b50      	ldr	r3, [pc, #320]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	494d      	ldr	r1, [pc, #308]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	4313      	orrs	r3, r2
 8001704:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d040      	beq.n	8001794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d107      	bne.n	800172a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171a:	4b47      	ldr	r3, [pc, #284]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d115      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e07f      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d107      	bne.n	8001742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001732:	4b41      	ldr	r3, [pc, #260]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d109      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e073      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001742:	4b3d      	ldr	r3, [pc, #244]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e06b      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001752:	4b39      	ldr	r3, [pc, #228]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f023 0203 	bic.w	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4936      	ldr	r1, [pc, #216]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001764:	f7ff fa1a 	bl	8000b9c <HAL_GetTick>
 8001768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176a:	e00a      	b.n	8001782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800176c:	f7ff fa16 	bl	8000b9c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	; 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e053      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001782:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 020c 	and.w	r2, r3, #12
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	429a      	cmp	r2, r3
 8001792:	d1eb      	bne.n	800176c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d210      	bcs.n	80017c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a2:	4b24      	ldr	r3, [pc, #144]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 0207 	bic.w	r2, r3, #7
 80017aa:	4922      	ldr	r1, [pc, #136]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e032      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4916      	ldr	r1, [pc, #88]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	490e      	ldr	r1, [pc, #56]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001802:	f000 f821 	bl	8001848 <HAL_RCC_GetSysClockFreq>
 8001806:	4602      	mov	r2, r0
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	490a      	ldr	r1, [pc, #40]	; (800183c <HAL_RCC_ClockConfig+0x1c8>)
 8001814:	5ccb      	ldrb	r3, [r1, r3]
 8001816:	fa22 f303 	lsr.w	r3, r2, r3
 800181a:	4a09      	ldr	r2, [pc, #36]	; (8001840 <HAL_RCC_ClockConfig+0x1cc>)
 800181c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_RCC_ClockConfig+0x1d0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff f978 	bl	8000b18 <HAL_InitTick>

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40022000 	.word	0x40022000
 8001838:	40021000 	.word	0x40021000
 800183c:	08002b40 	.word	0x08002b40
 8001840:	20000004 	.word	0x20000004
 8001844:	20000008 	.word	0x20000008

08001848 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b04      	cmp	r3, #4
 8001870:	d002      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0x30>
 8001872:	2b08      	cmp	r3, #8
 8001874:	d003      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0x36>
 8001876:	e027      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800187a:	613b      	str	r3, [r7, #16]
      break;
 800187c:	e027      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	0c9b      	lsrs	r3, r3, #18
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	4a17      	ldr	r2, [pc, #92]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001888:	5cd3      	ldrb	r3, [r2, r3]
 800188a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d010      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	0c5b      	lsrs	r3, r3, #17
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018a2:	5cd3      	ldrb	r3, [r2, r3]
 80018a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a0d      	ldr	r2, [pc, #52]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80018aa:	fb03 f202 	mul.w	r2, r3, r2
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e004      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a0c      	ldr	r2, [pc, #48]	; (80018ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80018bc:	fb02 f303 	mul.w	r3, r2, r3
 80018c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	613b      	str	r3, [r7, #16]
      break;
 80018c6:	e002      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ca:	613b      	str	r3, [r7, #16]
      break;
 80018cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ce:	693b      	ldr	r3, [r7, #16]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	371c      	adds	r7, #28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000
 80018e0:	007a1200 	.word	0x007a1200
 80018e4:	08002b50 	.word	0x08002b50
 80018e8:	08002b60 	.word	0x08002b60
 80018ec:	003d0900 	.word	0x003d0900

080018f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018f8:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <RCC_Delay+0x34>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <RCC_Delay+0x38>)
 80018fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001902:	0a5b      	lsrs	r3, r3, #9
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	fb02 f303 	mul.w	r3, r2, r3
 800190a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800190c:	bf00      	nop
  }
  while (Delay --);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1e5a      	subs	r2, r3, #1
 8001912:	60fa      	str	r2, [r7, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f9      	bne.n	800190c <RCC_Delay+0x1c>
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	20000004 	.word	0x20000004
 8001928:	10624dd3 	.word	0x10624dd3

0800192c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e041      	b.n	80019c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d106      	bne.n	8001958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff f802 	bl	800095c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2202      	movs	r2, #2
 800195c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3304      	adds	r3, #4
 8001968:	4619      	mov	r1, r3
 800196a:	4610      	mov	r0, r2
 800196c:	f000 fca4 	bl	80022b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d001      	beq.n	80019e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e035      	b.n	8001a50 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2202      	movs	r2, #2
 80019e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a16      	ldr	r2, [pc, #88]	; (8001a5c <HAL_TIM_Base_Start_IT+0x90>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d009      	beq.n	8001a1a <HAL_TIM_Base_Start_IT+0x4e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a0e:	d004      	beq.n	8001a1a <HAL_TIM_Base_Start_IT+0x4e>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <HAL_TIM_Base_Start_IT+0x94>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d111      	bne.n	8001a3e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2b06      	cmp	r3, #6
 8001a2a:	d010      	beq.n	8001a4e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0201 	orr.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a3c:	e007      	b.n	8001a4e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 0201 	orr.w	r2, r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40012c00 	.word	0x40012c00
 8001a60:	40000400 	.word	0x40000400

08001a64 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e041      	b.n	8001afa <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d106      	bne.n	8001a90 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f839 	bl	8001b02 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2202      	movs	r2, #2
 8001a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	f000 fc08 	bl	80022b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d104      	bne.n	8001b32 <HAL_TIM_IC_Start_IT+0x1e>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	e013      	b.n	8001b5a <HAL_TIM_IC_Start_IT+0x46>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d104      	bne.n	8001b42 <HAL_TIM_IC_Start_IT+0x2e>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	e00b      	b.n	8001b5a <HAL_TIM_IC_Start_IT+0x46>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d104      	bne.n	8001b52 <HAL_TIM_IC_Start_IT+0x3e>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	e003      	b.n	8001b5a <HAL_TIM_IC_Start_IT+0x46>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d104      	bne.n	8001b6c <HAL_TIM_IC_Start_IT+0x58>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	e013      	b.n	8001b94 <HAL_TIM_IC_Start_IT+0x80>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d104      	bne.n	8001b7c <HAL_TIM_IC_Start_IT+0x68>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	e00b      	b.n	8001b94 <HAL_TIM_IC_Start_IT+0x80>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d104      	bne.n	8001b8c <HAL_TIM_IC_Start_IT+0x78>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	e003      	b.n	8001b94 <HAL_TIM_IC_Start_IT+0x80>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001b96:	7bbb      	ldrb	r3, [r7, #14]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d102      	bne.n	8001ba2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001b9c:	7b7b      	ldrb	r3, [r7, #13]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d001      	beq.n	8001ba6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e0b3      	b.n	8001d0e <HAL_TIM_IC_Start_IT+0x1fa>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d104      	bne.n	8001bb6 <HAL_TIM_IC_Start_IT+0xa2>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bb4:	e013      	b.n	8001bde <HAL_TIM_IC_Start_IT+0xca>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d104      	bne.n	8001bc6 <HAL_TIM_IC_Start_IT+0xb2>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bc4:	e00b      	b.n	8001bde <HAL_TIM_IC_Start_IT+0xca>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d104      	bne.n	8001bd6 <HAL_TIM_IC_Start_IT+0xc2>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bd4:	e003      	b.n	8001bde <HAL_TIM_IC_Start_IT+0xca>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2202      	movs	r2, #2
 8001bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d104      	bne.n	8001bee <HAL_TIM_IC_Start_IT+0xda>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bec:	e013      	b.n	8001c16 <HAL_TIM_IC_Start_IT+0x102>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d104      	bne.n	8001bfe <HAL_TIM_IC_Start_IT+0xea>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bfc:	e00b      	b.n	8001c16 <HAL_TIM_IC_Start_IT+0x102>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d104      	bne.n	8001c0e <HAL_TIM_IC_Start_IT+0xfa>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c0c:	e003      	b.n	8001c16 <HAL_TIM_IC_Start_IT+0x102>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2202      	movs	r2, #2
 8001c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	2b0c      	cmp	r3, #12
 8001c1a:	d841      	bhi.n	8001ca0 <HAL_TIM_IC_Start_IT+0x18c>
 8001c1c:	a201      	add	r2, pc, #4	; (adr r2, 8001c24 <HAL_TIM_IC_Start_IT+0x110>)
 8001c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c22:	bf00      	nop
 8001c24:	08001c59 	.word	0x08001c59
 8001c28:	08001ca1 	.word	0x08001ca1
 8001c2c:	08001ca1 	.word	0x08001ca1
 8001c30:	08001ca1 	.word	0x08001ca1
 8001c34:	08001c6b 	.word	0x08001c6b
 8001c38:	08001ca1 	.word	0x08001ca1
 8001c3c:	08001ca1 	.word	0x08001ca1
 8001c40:	08001ca1 	.word	0x08001ca1
 8001c44:	08001c7d 	.word	0x08001c7d
 8001c48:	08001ca1 	.word	0x08001ca1
 8001c4c:	08001ca1 	.word	0x08001ca1
 8001c50:	08001ca1 	.word	0x08001ca1
 8001c54:	08001c8f 	.word	0x08001c8f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0202 	orr.w	r2, r2, #2
 8001c66:	60da      	str	r2, [r3, #12]
      break;
 8001c68:	e01d      	b.n	8001ca6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 0204 	orr.w	r2, r2, #4
 8001c78:	60da      	str	r2, [r3, #12]
      break;
 8001c7a:	e014      	b.n	8001ca6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0208 	orr.w	r2, r2, #8
 8001c8a:	60da      	str	r2, [r3, #12]
      break;
 8001c8c:	e00b      	b.n	8001ca6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 0210 	orr.w	r2, r2, #16
 8001c9c:	60da      	str	r2, [r3, #12]
      break;
 8001c9e:	e002      	b.n	8001ca6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ca4:	bf00      	nop
  }

  if (status == HAL_OK)
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d12f      	bne.n	8001d0c <HAL_TIM_IC_Start_IT+0x1f8>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	6839      	ldr	r1, [r7, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f000 fcf4 	bl	80026a2 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a16      	ldr	r2, [pc, #88]	; (8001d18 <HAL_TIM_IC_Start_IT+0x204>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d009      	beq.n	8001cd8 <HAL_TIM_IC_Start_IT+0x1c4>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ccc:	d004      	beq.n	8001cd8 <HAL_TIM_IC_Start_IT+0x1c4>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <HAL_TIM_IC_Start_IT+0x208>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d111      	bne.n	8001cfc <HAL_TIM_IC_Start_IT+0x1e8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b06      	cmp	r3, #6
 8001ce8:	d010      	beq.n	8001d0c <HAL_TIM_IC_Start_IT+0x1f8>
      {
        __HAL_TIM_ENABLE(htim);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f042 0201 	orr.w	r2, r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cfa:	e007      	b.n	8001d0c <HAL_TIM_IC_Start_IT+0x1f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40012c00 	.word	0x40012c00
 8001d1c:	40000400 	.word	0x40000400

08001d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d122      	bne.n	8001d7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d11b      	bne.n	8001d7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0202 	mvn.w	r2, #2
 8001d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7fe fb9c 	bl	80004a0 <HAL_TIM_IC_CaptureCallback>
 8001d68:	e005      	b.n	8001d76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 fa88 	bl	8002280 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 fa8e 	bl	8002292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d122      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d11b      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0204 	mvn.w	r2, #4
 8001da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2202      	movs	r2, #2
 8001da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7fe fb72 	bl	80004a0 <HAL_TIM_IC_CaptureCallback>
 8001dbc:	e005      	b.n	8001dca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 fa5e 	bl	8002280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 fa64 	bl	8002292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d122      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d11b      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0208 	mvn.w	r2, #8
 8001df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2204      	movs	r2, #4
 8001dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7fe fb48 	bl	80004a0 <HAL_TIM_IC_CaptureCallback>
 8001e10:	e005      	b.n	8001e1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 fa34 	bl	8002280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 fa3a 	bl	8002292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	2b10      	cmp	r3, #16
 8001e30:	d122      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0310 	and.w	r3, r3, #16
 8001e3c:	2b10      	cmp	r3, #16
 8001e3e:	d11b      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0210 	mvn.w	r2, #16
 8001e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7fe fb1e 	bl	80004a0 <HAL_TIM_IC_CaptureCallback>
 8001e64:	e005      	b.n	8001e72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 fa0a 	bl	8002280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 fa10 	bl	8002292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d10e      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d107      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0201 	mvn.w	r2, #1
 8001e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe fabe 	bl	8000420 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eae:	2b80      	cmp	r3, #128	; 0x80
 8001eb0:	d10e      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ebc:	2b80      	cmp	r3, #128	; 0x80
 8001ebe:	d107      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fc6f 	bl	80027ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eda:	2b40      	cmp	r3, #64	; 0x40
 8001edc:	d10e      	bne.n	8001efc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee8:	2b40      	cmp	r3, #64	; 0x40
 8001eea:	d107      	bne.n	8001efc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f9d4 	bl	80022a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b20      	cmp	r3, #32
 8001f08:	d10e      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0320 	and.w	r3, r3, #32
 8001f14:	2b20      	cmp	r3, #32
 8001f16:	d107      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0220 	mvn.w	r2, #32
 8001f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 fc3a 	bl	800279c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_TIM_IC_ConfigChannel+0x1e>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e088      	b.n	8002060 <HAL_TIM_IC_ConfigChannel+0x130>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d11b      	bne.n	8001f94 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6818      	ldr	r0, [r3, #0]
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	6819      	ldr	r1, [r3, #0]
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f000 f9fc 	bl	8002368 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699a      	ldr	r2, [r3, #24]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 020c 	bic.w	r2, r2, #12
 8001f7e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6999      	ldr	r1, [r3, #24]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	619a      	str	r2, [r3, #24]
 8001f92:	e060      	b.n	8002056 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d11c      	bne.n	8001fd4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	6819      	ldr	r1, [r3, #0]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f000 fa5f 	bl	800246c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	699a      	ldr	r2, [r3, #24]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001fbc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6999      	ldr	r1, [r3, #24]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	021a      	lsls	r2, r3, #8
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	619a      	str	r2, [r3, #24]
 8001fd2:	e040      	b.n	8002056 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d11b      	bne.n	8002012 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	6819      	ldr	r1, [r3, #0]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f000 faaa 	bl	8002542 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	69da      	ldr	r2, [r3, #28]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 020c 	bic.w	r2, r2, #12
 8001ffc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	69d9      	ldr	r1, [r3, #28]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	61da      	str	r2, [r3, #28]
 8002010:	e021      	b.n	8002056 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b0c      	cmp	r3, #12
 8002016:	d11c      	bne.n	8002052 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6818      	ldr	r0, [r3, #0]
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	6819      	ldr	r1, [r3, #0]
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f000 fac6 	bl	80025b8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	69da      	ldr	r2, [r3, #28]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800203a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	69d9      	ldr	r1, [r3, #28]
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	021a      	lsls	r2, r3, #8
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	61da      	str	r2, [r3, #28]
 8002050:	e001      	b.n	8002056 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800205e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_TIM_ConfigClockSource+0x1c>
 8002080:	2302      	movs	r3, #2
 8002082:	e0b4      	b.n	80021ee <HAL_TIM_ConfigClockSource+0x186>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020bc:	d03e      	beq.n	800213c <HAL_TIM_ConfigClockSource+0xd4>
 80020be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020c2:	f200 8087 	bhi.w	80021d4 <HAL_TIM_ConfigClockSource+0x16c>
 80020c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ca:	f000 8086 	beq.w	80021da <HAL_TIM_ConfigClockSource+0x172>
 80020ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020d2:	d87f      	bhi.n	80021d4 <HAL_TIM_ConfigClockSource+0x16c>
 80020d4:	2b70      	cmp	r3, #112	; 0x70
 80020d6:	d01a      	beq.n	800210e <HAL_TIM_ConfigClockSource+0xa6>
 80020d8:	2b70      	cmp	r3, #112	; 0x70
 80020da:	d87b      	bhi.n	80021d4 <HAL_TIM_ConfigClockSource+0x16c>
 80020dc:	2b60      	cmp	r3, #96	; 0x60
 80020de:	d050      	beq.n	8002182 <HAL_TIM_ConfigClockSource+0x11a>
 80020e0:	2b60      	cmp	r3, #96	; 0x60
 80020e2:	d877      	bhi.n	80021d4 <HAL_TIM_ConfigClockSource+0x16c>
 80020e4:	2b50      	cmp	r3, #80	; 0x50
 80020e6:	d03c      	beq.n	8002162 <HAL_TIM_ConfigClockSource+0xfa>
 80020e8:	2b50      	cmp	r3, #80	; 0x50
 80020ea:	d873      	bhi.n	80021d4 <HAL_TIM_ConfigClockSource+0x16c>
 80020ec:	2b40      	cmp	r3, #64	; 0x40
 80020ee:	d058      	beq.n	80021a2 <HAL_TIM_ConfigClockSource+0x13a>
 80020f0:	2b40      	cmp	r3, #64	; 0x40
 80020f2:	d86f      	bhi.n	80021d4 <HAL_TIM_ConfigClockSource+0x16c>
 80020f4:	2b30      	cmp	r3, #48	; 0x30
 80020f6:	d064      	beq.n	80021c2 <HAL_TIM_ConfigClockSource+0x15a>
 80020f8:	2b30      	cmp	r3, #48	; 0x30
 80020fa:	d86b      	bhi.n	80021d4 <HAL_TIM_ConfigClockSource+0x16c>
 80020fc:	2b20      	cmp	r3, #32
 80020fe:	d060      	beq.n	80021c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002100:	2b20      	cmp	r3, #32
 8002102:	d867      	bhi.n	80021d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002104:	2b00      	cmp	r3, #0
 8002106:	d05c      	beq.n	80021c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002108:	2b10      	cmp	r3, #16
 800210a:	d05a      	beq.n	80021c2 <HAL_TIM_ConfigClockSource+0x15a>
 800210c:	e062      	b.n	80021d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6899      	ldr	r1, [r3, #8]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f000 faa1 	bl	8002664 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002130:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	609a      	str	r2, [r3, #8]
      break;
 800213a:	e04f      	b.n	80021dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	6899      	ldr	r1, [r3, #8]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f000 fa8a 	bl	8002664 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800215e:	609a      	str	r2, [r3, #8]
      break;
 8002160:	e03c      	b.n	80021dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	6859      	ldr	r1, [r3, #4]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	461a      	mov	r2, r3
 8002170:	f000 f94e 	bl	8002410 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2150      	movs	r1, #80	; 0x50
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fa58 	bl	8002630 <TIM_ITRx_SetConfig>
      break;
 8002180:	e02c      	b.n	80021dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	6859      	ldr	r1, [r3, #4]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	461a      	mov	r2, r3
 8002190:	f000 f9a8 	bl	80024e4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2160      	movs	r1, #96	; 0x60
 800219a:	4618      	mov	r0, r3
 800219c:	f000 fa48 	bl	8002630 <TIM_ITRx_SetConfig>
      break;
 80021a0:	e01c      	b.n	80021dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	6859      	ldr	r1, [r3, #4]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	461a      	mov	r2, r3
 80021b0:	f000 f92e 	bl	8002410 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2140      	movs	r1, #64	; 0x40
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 fa38 	bl	8002630 <TIM_ITRx_SetConfig>
      break;
 80021c0:	e00c      	b.n	80021dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4619      	mov	r1, r3
 80021cc:	4610      	mov	r0, r2
 80021ce:	f000 fa2f 	bl	8002630 <TIM_ITRx_SetConfig>
      break;
 80021d2:	e003      	b.n	80021dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
      break;
 80021d8:	e000      	b.n	80021dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80021da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2b0c      	cmp	r3, #12
 800220a:	d831      	bhi.n	8002270 <HAL_TIM_ReadCapturedValue+0x78>
 800220c:	a201      	add	r2, pc, #4	; (adr r2, 8002214 <HAL_TIM_ReadCapturedValue+0x1c>)
 800220e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002212:	bf00      	nop
 8002214:	08002249 	.word	0x08002249
 8002218:	08002271 	.word	0x08002271
 800221c:	08002271 	.word	0x08002271
 8002220:	08002271 	.word	0x08002271
 8002224:	08002253 	.word	0x08002253
 8002228:	08002271 	.word	0x08002271
 800222c:	08002271 	.word	0x08002271
 8002230:	08002271 	.word	0x08002271
 8002234:	0800225d 	.word	0x0800225d
 8002238:	08002271 	.word	0x08002271
 800223c:	08002271 	.word	0x08002271
 8002240:	08002271 	.word	0x08002271
 8002244:	08002267 	.word	0x08002267
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224e:	60fb      	str	r3, [r7, #12]

      break;
 8002250:	e00f      	b.n	8002272 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002258:	60fb      	str	r3, [r7, #12]

      break;
 800225a:	e00a      	b.n	8002272 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002262:	60fb      	str	r3, [r7, #12]

      break;
 8002264:	e005      	b.n	8002272 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	60fb      	str	r3, [r7, #12]

      break;
 800226e:	e000      	b.n	8002272 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002270:	bf00      	nop
  }

  return tmpreg;
 8002272:	68fb      	ldr	r3, [r7, #12]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop

08002280 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr

08002292 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr
	...

080022b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a25      	ldr	r2, [pc, #148]	; (8002360 <TIM_Base_SetConfig+0xa8>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d007      	beq.n	80022e0 <TIM_Base_SetConfig+0x28>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d6:	d003      	beq.n	80022e0 <TIM_Base_SetConfig+0x28>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a22      	ldr	r2, [pc, #136]	; (8002364 <TIM_Base_SetConfig+0xac>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d108      	bne.n	80022f2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a1a      	ldr	r2, [pc, #104]	; (8002360 <TIM_Base_SetConfig+0xa8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d007      	beq.n	800230a <TIM_Base_SetConfig+0x52>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002300:	d003      	beq.n	800230a <TIM_Base_SetConfig+0x52>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a17      	ldr	r2, [pc, #92]	; (8002364 <TIM_Base_SetConfig+0xac>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d108      	bne.n	800231c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a07      	ldr	r2, [pc, #28]	; (8002360 <TIM_Base_SetConfig+0xa8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d103      	bne.n	8002350 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	615a      	str	r2, [r3, #20]
}
 8002356:	bf00      	nop
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	40012c00 	.word	0x40012c00
 8002364:	40000400 	.word	0x40000400

08002368 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002368:	b480      	push	{r7}
 800236a:	b087      	sub	sp, #28
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	f023 0201 	bic.w	r2, r3, #1
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4a1d      	ldr	r2, [pc, #116]	; (8002408 <TIM_TI1_SetConfig+0xa0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d007      	beq.n	80023a6 <TIM_TI1_SetConfig+0x3e>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800239c:	d003      	beq.n	80023a6 <TIM_TI1_SetConfig+0x3e>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4a1a      	ldr	r2, [pc, #104]	; (800240c <TIM_TI1_SetConfig+0xa4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <TIM_TI1_SetConfig+0x42>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <TIM_TI1_SetConfig+0x44>
 80023aa:	2300      	movs	r3, #0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f023 0303 	bic.w	r3, r3, #3
 80023b6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4313      	orrs	r3, r2
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	e003      	b.n	80023ca <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	4313      	orrs	r3, r2
 80023dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f023 030a 	bic.w	r3, r3, #10
 80023e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f003 030a 	and.w	r3, r3, #10
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	621a      	str	r2, [r3, #32]
}
 80023fe:	bf00      	nop
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr
 8002408:	40012c00 	.word	0x40012c00
 800240c:	40000400 	.word	0x40000400

08002410 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	f023 0201 	bic.w	r2, r3, #1
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800243a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f023 030a 	bic.w	r3, r3, #10
 800244c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4313      	orrs	r3, r2
 8002454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	621a      	str	r2, [r3, #32]
}
 8002462:	bf00      	nop
 8002464:	371c      	adds	r7, #28
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800246c:	b480      	push	{r7}
 800246e:	b087      	sub	sp, #28
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	f023 0210 	bic.w	r2, r3, #16
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002498:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	021b      	lsls	r3, r3, #8
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	031b      	lsls	r3, r3, #12
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024be:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	621a      	str	r2, [r3, #32]
}
 80024da:	bf00      	nop
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	f023 0210 	bic.w	r2, r3, #16
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800250e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	031b      	lsls	r3, r3, #12
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002520:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	4313      	orrs	r3, r2
 800252a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	621a      	str	r2, [r3, #32]
}
 8002538:	bf00      	nop
 800253a:	371c      	adds	r7, #28
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr

08002542 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002542:	b480      	push	{r7}
 8002544:	b087      	sub	sp, #28
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	f023 0303 	bic.w	r3, r3, #3
 800256e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800257e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	b2db      	uxtb	r3, r3
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002592:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	4313      	orrs	r3, r2
 80025a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	621a      	str	r2, [r3, #32]
}
 80025ae:	bf00      	nop
 80025b0:	371c      	adds	r7, #28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
 80025c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025f6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	031b      	lsls	r3, r3, #12
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800260a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	031b      	lsls	r3, r3, #12
 8002610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	4313      	orrs	r3, r2
 8002618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	621a      	str	r2, [r3, #32]
}
 8002626:	bf00      	nop
 8002628:	371c      	adds	r7, #28
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr

08002630 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002646:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4313      	orrs	r3, r2
 800264e:	f043 0307 	orr.w	r3, r3, #7
 8002652:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	609a      	str	r2, [r3, #8]
}
 800265a:	bf00      	nop
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr

08002664 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
 8002670:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800267e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	021a      	lsls	r2, r3, #8
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	431a      	orrs	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4313      	orrs	r3, r2
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	4313      	orrs	r3, r2
 8002690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	609a      	str	r2, [r3, #8]
}
 8002698:	bf00      	nop
 800269a:	371c      	adds	r7, #28
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b087      	sub	sp, #28
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	2201      	movs	r2, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a1a      	ldr	r2, [r3, #32]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	43db      	mvns	r3, r3
 80026c4:	401a      	ands	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6a1a      	ldr	r2, [r3, #32]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	f003 031f 	and.w	r3, r3, #31
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	fa01 f303 	lsl.w	r3, r1, r3
 80026da:	431a      	orrs	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	621a      	str	r2, [r3, #32]
}
 80026e0:	bf00      	nop
 80026e2:	371c      	adds	r7, #28
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
	...

080026ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002700:	2302      	movs	r3, #2
 8002702:	e041      	b.n	8002788 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a14      	ldr	r2, [pc, #80]	; (8002794 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d009      	beq.n	800275c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002750:	d004      	beq.n	800275c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a10      	ldr	r2, [pc, #64]	; (8002798 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d10c      	bne.n	8002776 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002762:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	4313      	orrs	r3, r2
 800276c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40012c00 	.word	0x40012c00
 8002798:	40000400 	.word	0x40000400

0800279c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr

080027ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr

080027c0 <__libc_init_array>:
 80027c0:	b570      	push	{r4, r5, r6, lr}
 80027c2:	2600      	movs	r6, #0
 80027c4:	4d0c      	ldr	r5, [pc, #48]	; (80027f8 <__libc_init_array+0x38>)
 80027c6:	4c0d      	ldr	r4, [pc, #52]	; (80027fc <__libc_init_array+0x3c>)
 80027c8:	1b64      	subs	r4, r4, r5
 80027ca:	10a4      	asrs	r4, r4, #2
 80027cc:	42a6      	cmp	r6, r4
 80027ce:	d109      	bne.n	80027e4 <__libc_init_array+0x24>
 80027d0:	f000 f822 	bl	8002818 <_init>
 80027d4:	2600      	movs	r6, #0
 80027d6:	4d0a      	ldr	r5, [pc, #40]	; (8002800 <__libc_init_array+0x40>)
 80027d8:	4c0a      	ldr	r4, [pc, #40]	; (8002804 <__libc_init_array+0x44>)
 80027da:	1b64      	subs	r4, r4, r5
 80027dc:	10a4      	asrs	r4, r4, #2
 80027de:	42a6      	cmp	r6, r4
 80027e0:	d105      	bne.n	80027ee <__libc_init_array+0x2e>
 80027e2:	bd70      	pop	{r4, r5, r6, pc}
 80027e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80027e8:	4798      	blx	r3
 80027ea:	3601      	adds	r6, #1
 80027ec:	e7ee      	b.n	80027cc <__libc_init_array+0xc>
 80027ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80027f2:	4798      	blx	r3
 80027f4:	3601      	adds	r6, #1
 80027f6:	e7f2      	b.n	80027de <__libc_init_array+0x1e>
 80027f8:	08002b64 	.word	0x08002b64
 80027fc:	08002b64 	.word	0x08002b64
 8002800:	08002b64 	.word	0x08002b64
 8002804:	08002b68 	.word	0x08002b68

08002808 <memset>:
 8002808:	4603      	mov	r3, r0
 800280a:	4402      	add	r2, r0
 800280c:	4293      	cmp	r3, r2
 800280e:	d100      	bne.n	8002812 <memset+0xa>
 8002810:	4770      	bx	lr
 8002812:	f803 1b01 	strb.w	r1, [r3], #1
 8002816:	e7f9      	b.n	800280c <memset+0x4>

08002818 <_init>:
 8002818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281a:	bf00      	nop
 800281c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281e:	bc08      	pop	{r3}
 8002820:	469e      	mov	lr, r3
 8002822:	4770      	bx	lr

08002824 <_fini>:
 8002824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002826:	bf00      	nop
 8002828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800282a:	bc08      	pop	{r3}
 800282c:	469e      	mov	lr, r3
 800282e:	4770      	bx	lr
